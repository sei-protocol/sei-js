{
	"numFailedTestSuites": 0,
	"numFailedTests": 0,
	"numPassedTestSuites": 13,
	"numPassedTests": 176,
	"numPendingTestSuites": 0,
	"numPendingTests": 0,
	"numRuntimeErrorTestSuites": 0,
	"numTodoTests": 0,
	"numTotalTestSuites": 13,
	"numTotalTests": 176,
	"openHandles": [],
	"snapshot": {
		"added": 0,
		"didUpdate": false,
		"failure": false,
		"filesAdded": 0,
		"filesRemoved": 0,
		"filesRemovedList": [],
		"filesUnmatched": 0,
		"filesUpdated": 0,
		"matched": 0,
		"total": 0,
		"unchecked": 0,
		"uncheckedKeysByFile": [],
		"unmatched": 0,
		"updated": 0
	},
	"startTime": 1748058916005,
	"success": true,
	"testResults": [
		{
			"assertionResults": [
				{
					"ancestorTitles": ["EVM Tools", "Network Information Tools"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Network Information Tools get_chain_info - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 7,
					"retryReasons": [],
					"status": "passed",
					"title": "get_chain_info - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Network Information Tools"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Network Information Tools get_chain_info - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_chain_info - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Network Information Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Network Information Tools get_supported_networks - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_supported_networks - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Network Information Tools"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Network Information Tools get_supported_networks - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_supported_networks - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Block Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Block Tools get_block_by_number - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "get_block_by_number - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Block Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Block Tools get_block_by_number - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_block_by_number - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Block Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Block Tools get_latest_block - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "get_latest_block - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Block Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Block Tools get_latest_block - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_latest_block - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_balance - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_balance - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_balance - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_balance - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_token_balance - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_token_balance - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_token_balance - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_token_balance - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_nft_balance - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_nft_balance - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_nft_balance - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_nft_balance - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_erc1155_balance - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_erc1155_balance - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Balance Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Balance Tools get_erc1155_balance - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_erc1155_balance - error path"
				},
				{
					"ancestorTitles": ["EVM Tools"],
					"duration": 7,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools should register all expected tools",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 18,
					"retryReasons": [],
					"status": "passed",
					"title": "should register all expected tools"
				},
				{
					"ancestorTitles": ["EVM Tools", "Transaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Transaction Tools get_transaction - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_transaction - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Transaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Transaction Tools get_transaction - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_transaction - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Transaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Transaction Tools get_transaction_receipt - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_transaction_receipt - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Transaction Tools"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Transaction Tools get_transaction_receipt - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_transaction_receipt - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Token Information Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Token Information Tools get_token_info - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_token_info - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Token Information Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Token Information Tools get_token_info - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_token_info - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Token Information Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Token Information Tools get_nft_info - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "get_nft_info - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Token Information Tools"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Token Information Tools get_nft_info - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "get_nft_info - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Contract Interaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Contract Interaction Tools read_contract - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "read_contract - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Contract Interaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Contract Interaction Tools read_contract - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "read_contract - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Contract Interaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Contract Interaction Tools write_contract - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "write_contract - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Contract Interaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Contract Interaction Tools write_contract - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "write_contract - error path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Contract Interaction Tools"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Contract Interaction Tools is_contract - success path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "is_contract - success path"
				},
				{
					"ancestorTitles": ["EVM Tools", "Contract Interaction Tools"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "EVM Tools Contract Interaction Tools is_contract - error path",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "is_contract - error path"
				}
			],
			"endTime": 1748058916368,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/tools.integration.test.ts",
			"startTime": 1748058916095,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Transfer Service", "transferSei"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferSei should transfer SEI tokens successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should transfer SEI tokens successfully"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferSei"],
					"duration": 6,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferSei should throw error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when private key is not available"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferSei"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferSei should throw error when wallet account is not initialized",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when wallet account is not initialized"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC20"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC20 should transfer ERC20 tokens successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should transfer ERC20 tokens successfully"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC20"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC20 should throw error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when private key is not available"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC20"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC20 should throw error when wallet account is not initialized",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when wallet account is not initialized"
				},
				{
					"ancestorTitles": ["Transfer Service", "approveERC20"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service approveERC20 should approve ERC20 token spending successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should approve ERC20 token spending successfully"
				},
				{
					"ancestorTitles": ["Transfer Service", "approveERC20"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service approveERC20 should throw error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when private key is not available"
				},
				{
					"ancestorTitles": ["Transfer Service", "approveERC20"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service approveERC20 should throw error when wallet account is not initialized",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when wallet account is not initialized"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC721"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC721 should transfer ERC721 token successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should transfer ERC721 token successfully"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC721"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC721 should throw error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when private key is not available"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC721"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC721 should throw error when wallet account is not initialized",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when wallet account is not initialized"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC721"],
					"duration": 5,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC721 should handle errors when fetching NFT metadata",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors when fetching NFT metadata"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC1155"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC1155 should transfer ERC1155 token successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should transfer ERC1155 token successfully"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC1155"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC1155 should throw error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when private key is not available"
				},
				{
					"ancestorTitles": ["Transfer Service", "transferERC1155"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transfer Service transferERC1155 should throw error when wallet account is not initialized",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when wallet account is not initialized"
				}
			],
			"endTime": 1748058916515,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/transfer.test.ts",
			"startTime": 1748058916381,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Contract Service", "readContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service readContract should call public client readContract with correct parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should call public client readContract with correct parameters"
				},
				{
					"ancestorTitles": ["Contract Service", "readContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service readContract should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Contract Service", "writeContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service writeContract should call wallet client writeContract with correct parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should call wallet client writeContract with correct parameters"
				},
				{
					"ancestorTitles": ["Contract Service", "writeContract"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service writeContract should throw error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error when private key is not available"
				},
				{
					"ancestorTitles": ["Contract Service", "writeContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service writeContract should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Contract Service", "getLogs"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service getLogs should call public client getLogs with correct parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should call public client getLogs with correct parameters"
				},
				{
					"ancestorTitles": ["Contract Service", "getLogs"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service getLogs should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Contract Service", "isContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service isContract should return true when address has bytecode",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should return true when address has bytecode"
				},
				{
					"ancestorTitles": ["Contract Service", "isContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service isContract should return false when address has no bytecode",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return false when address has no bytecode"
				},
				{
					"ancestorTitles": ["Contract Service", "isContract"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service isContract should return false when bytecode is undefined",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return false when bytecode is undefined"
				},
				{
					"ancestorTitles": ["Contract Service", "isContract"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Contract Service isContract should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				}
			],
			"endTime": 1748058916628,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/contracts.test.ts",
			"startTime": 1748058916525,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Transactions Service", "getTransaction"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransaction should return transaction data for a given hash",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return transaction data for a given hash"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransaction"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransaction should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransaction"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransaction should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransactionReceipt"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransactionReceipt should return transaction receipt for a given hash",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return transaction receipt for a given hash"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransactionReceipt"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransactionReceipt should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransactionReceipt"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransactionReceipt should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransactionCount"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransactionCount should return transaction count for a given address",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return transaction count for a given address"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransactionCount"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransactionCount should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Transactions Service", "getTransactionCount"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getTransactionCount should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Transactions Service", "estimateGas"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service estimateGas should return gas estimate for given parameters",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return gas estimate for given parameters"
				},
				{
					"ancestorTitles": ["Transactions Service", "estimateGas"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service estimateGas should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Transactions Service", "estimateGas"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service estimateGas should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Transactions Service", "getChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getChainId should return chain ID for a given network",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return chain ID for a given network"
				},
				{
					"ancestorTitles": ["Transactions Service", "getChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getChainId should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Transactions Service", "getChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Transactions Service getChainId should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				}
			],
			"endTime": 1748058916730,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/transactions.test.ts",
			"startTime": 1748058916631,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Blocks Service", "getBlockNumber"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockNumber should return the current block number for a given network",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the current block number for a given network"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockNumber"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockNumber should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockNumber"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockNumber should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockByNumber"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockByNumber should return block data for a given block number",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return block data for a given block number"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockByNumber"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockByNumber should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockByNumber"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockByNumber should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockByHash"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockByHash should return block data for a given block hash",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return block data for a given block hash"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockByHash"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockByHash should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Blocks Service", "getBlockByHash"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getBlockByHash should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				},
				{
					"ancestorTitles": ["Blocks Service", "getLatestBlock"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getLatestBlock should return the latest block for a given network",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the latest block for a given network"
				},
				{
					"ancestorTitles": ["Blocks Service", "getLatestBlock"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getLatestBlock should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Blocks Service", "getLatestBlock"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Blocks Service getLatestBlock should handle errors from client calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from client calls"
				}
			],
			"endTime": 1748058916841,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/blocks.test.ts",
			"startTime": 1748058916732,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Balance Service", "getBalance"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service getBalance should return the native token balance",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the native token balance"
				},
				{
					"ancestorTitles": ["Balance Service", "getERC20Balance"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service getERC20Balance should return the ERC20 token balance with metadata",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the ERC20 token balance with metadata"
				},
				{
					"ancestorTitles": ["Balance Service", "isNFTOwner"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service isNFTOwner should return true if address owns the NFT",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return true if address owns the NFT"
				},
				{
					"ancestorTitles": ["Balance Service", "isNFTOwner"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service isNFTOwner should return false if address does not own the NFT",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return false if address does not own the NFT"
				},
				{
					"ancestorTitles": ["Balance Service", "isNFTOwner"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service isNFTOwner should return false if there is an error",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return false if there is an error"
				},
				{
					"ancestorTitles": ["Balance Service", "getERC721Balance"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service getERC721Balance should return the ERC721 token balance with metadata",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the ERC721 token balance with metadata"
				},
				{
					"ancestorTitles": ["Balance Service", "getERC1155Balance"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Balance Service getERC1155Balance should return the balance of the ERC1155 token",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the balance of the ERC1155 token"
				}
			],
			"endTime": 1748058916893,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/balance.test.ts",
			"startTime": 1748058916844,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Tokens Service", "getERC20TokenInfo"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC20TokenInfo should return token information for ERC20 tokens",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 8,
					"retryReasons": [],
					"status": "passed",
					"title": "should return token information for ERC20 tokens"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC20TokenInfo"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC20TokenInfo should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC20TokenInfo"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC20TokenInfo should handle errors from contract calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from contract calls"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC721TokenMetadata"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC721TokenMetadata should return token metadata for ERC721 tokens",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 6,
					"retryReasons": [],
					"status": "passed",
					"title": "should return token metadata for ERC721 tokens"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC721TokenMetadata"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC721TokenMetadata should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC721TokenMetadata"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC721TokenMetadata should handle errors from contract calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from contract calls"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC1155TokenURI"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC1155TokenURI should return token URI for ERC1155 tokens",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should return token URI for ERC1155 tokens"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC1155TokenURI"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC1155TokenURI should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Tokens Service", "getERC1155TokenURI"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Tokens Service getERC1155TokenURI should handle errors from contract calls",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle errors from contract calls"
				}
			],
			"endTime": 1748058916956,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/tokens.test.ts",
			"startTime": 1748058916897,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["chains module", "constants"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module constants DEFAULT_NETWORK is set correctly",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "DEFAULT_NETWORK is set correctly"
				},
				{
					"ancestorTitles": ["chains module", "constants"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module constants DEFAULT_RPC_URL is set correctly",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "DEFAULT_RPC_URL is set correctly"
				},
				{
					"ancestorTitles": ["chains module", "constants"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module constants DEFAULT_CHAIN_ID is set correctly",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "DEFAULT_CHAIN_ID is set correctly"
				},
				{
					"ancestorTitles": ["chains module", "constants"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module constants chainMap contains expected chains",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "chainMap contains expected chains"
				},
				{
					"ancestorTitles": ["chains module", "constants"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module constants networkNameMap contains expected mappings",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "networkNameMap contains expected mappings"
				},
				{
					"ancestorTitles": ["chains module", "constants"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module constants rpcUrlMap contains expected URLs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "rpcUrlMap contains expected URLs"
				},
				{
					"ancestorTitles": ["chains module", "resolveChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module resolveChainId resolves number chain IDs directly",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "resolves number chain IDs directly"
				},
				{
					"ancestorTitles": ["chains module", "resolveChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module resolveChainId resolves network names to chain IDs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "resolves network names to chain IDs"
				},
				{
					"ancestorTitles": ["chains module", "resolveChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module resolveChainId resolves case-insensitive network names",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "resolves case-insensitive network names"
				},
				{
					"ancestorTitles": ["chains module", "resolveChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module resolveChainId resolves string numbers to chain IDs",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "resolves string numbers to chain IDs"
				},
				{
					"ancestorTitles": ["chains module", "resolveChainId"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module resolveChainId defaults to DEFAULT_CHAIN_ID for unknown network names",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "defaults to DEFAULT_CHAIN_ID for unknown network names"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain returns chain for numeric chain ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns chain for numeric chain ID"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain returns chain for network name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns chain for network name"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain returns sei chain when network name exists but chain mapping is missing",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "returns sei chain when network name exists but chain mapping is missing"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain returns chain for case-insensitive network name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns chain for case-insensitive network name"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain returns default chain when no parameter is provided",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "returns default chain when no parameter is provided"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain returns sei chain for unknown numeric chain ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "returns sei chain for unknown numeric chain ID"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain throws error for numeric string that is not in networkNameMap",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "throws error for numeric string that is not in networkNameMap"
				},
				{
					"ancestorTitles": ["chains module", "getChain"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getChain throws error for unknown network name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "throws error for unknown network name"
				},
				{
					"ancestorTitles": ["chains module", "getRpcUrl"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getRpcUrl returns correct RPC URL for numeric chain ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns correct RPC URL for numeric chain ID"
				},
				{
					"ancestorTitles": ["chains module", "getRpcUrl"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getRpcUrl returns correct RPC URL for network name",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns correct RPC URL for network name"
				},
				{
					"ancestorTitles": ["chains module", "getRpcUrl"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getRpcUrl returns default RPC URL for unknown chain ID",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "returns default RPC URL for unknown chain ID"
				},
				{
					"ancestorTitles": ["chains module", "getRpcUrl"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getRpcUrl returns default RPC URL when no parameter is provided",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "returns default RPC URL when no parameter is provided"
				},
				{
					"ancestorTitles": ["chains module", "getSupportedNetworks"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "chains module getSupportedNetworks returns sorted list of supported networks",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "returns sorted list of supported networks"
				}
			],
			"endTime": 1748058917010,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/chains.test.ts",
			"startTime": 1748058916958,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Utils Module", "parseEther"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Utils Module parseEther should convert ether to wei",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should convert ether to wei"
				},
				{
					"ancestorTitles": ["Utils Module", "formatJson"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Utils Module formatJson should format an object to JSON with bigint handling",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should format an object to JSON with bigint handling"
				},
				{
					"ancestorTitles": ["Utils Module", "formatJson"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Utils Module formatJson should handle objects without bigints",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle objects without bigints"
				},
				{
					"ancestorTitles": ["Utils Module", "validateAddress"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Utils Module validateAddress should return the address if it is valid",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the address if it is valid"
				},
				{
					"ancestorTitles": ["Utils Module", "validateAddress"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Utils Module validateAddress should throw an error if the address is invalid",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw an error if the address is invalid"
				}
			],
			"endTime": 1748058917048,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/utils.test.ts",
			"startTime": 1748058917012,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["registerEVMTools"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools registers all expected tools",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 14,
					"retryReasons": [],
					"status": "passed",
					"title": "registers all expected tools"
				},
				{
					"ancestorTitles": ["registerEVMTools"],
					"duration": 2,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools each registered tool has a handler function",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 27,
					"retryReasons": [],
					"status": "passed",
					"title": "each registered tool has a handler function"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_chain_info tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_chain_info tool returns chain info successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "returns chain info successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_chain_info tool"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_chain_info tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_supported_networks tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_supported_networks tool returns supported networks successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "returns supported networks successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_supported_networks tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_supported_networks tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_block_by_number tool"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_block_by_number tool returns block information successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns block information successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_block_by_number tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_block_by_number tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_balance tool"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_balance tool returns balance information successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "returns balance information successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_balance tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_balance tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_latest_block tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_latest_block tool returns latest block information successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns latest block information successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_latest_block tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_latest_block tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_nft_balance tool"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_nft_balance tool returns NFT balance successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "returns NFT balance successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_nft_balance tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_nft_balance tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_erc1155_balance tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_erc1155_balance tool returns ERC1155 token balance successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "returns ERC1155 token balance successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_erc1155_balance tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_erc1155_balance tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_token_info tool"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_token_info tool returns token information successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "returns token information successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_token_info tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_token_info tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_nft_info tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_nft_info tool returns NFT information successfully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "returns NFT information successfully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_nft_info tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_nft_info tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_address_from_private_key tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_address_from_private_key tool returns address successfully when private key is available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns address successfully when private key is available"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_address_from_private_key tool"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_address_from_private_key tool returns error when private key is not available",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 3,
					"retryReasons": [],
					"status": "passed",
					"title": "returns error when private key is not available"
				},
				{
					"ancestorTitles": ["registerEVMTools", "get_address_from_private_key tool"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "registerEVMTools get_address_from_private_key tool handles errors gracefully",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "handles errors gracefully"
				}
			],
			"endTime": 1748058917071,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/tools.handlers.test.ts",
			"startTime": 1748058917049,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Client Service", "getPublicClient"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getPublicClient should create and return a new public client when not cached",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 5,
					"retryReasons": [],
					"status": "passed",
					"title": "should create and return a new public client when not cached"
				},
				{
					"ancestorTitles": ["Client Service", "getPublicClient"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getPublicClient should return cached client for the same network",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should return cached client for the same network"
				},
				{
					"ancestorTitles": ["Client Service", "getPublicClient"],
					"duration": 3,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getPublicClient should throw error if cache has key but client is undefined",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should throw error if cache has key but client is undefined"
				},
				{
					"ancestorTitles": ["Client Service", "getPublicClient"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getPublicClient should create different clients for different networks",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 4,
					"retryReasons": [],
					"status": "passed",
					"title": "should create different clients for different networks"
				},
				{
					"ancestorTitles": ["Client Service", "getPublicClient"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getPublicClient should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Client Service", "getWalletClient"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getWalletClient should create and return a wallet client",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 6,
					"retryReasons": [],
					"status": "passed",
					"title": "should create and return a wallet client"
				},
				{
					"ancestorTitles": ["Client Service", "getWalletClient"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getWalletClient should use default network when none is specified",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should use default network when none is specified"
				},
				{
					"ancestorTitles": ["Client Service", "getAddressFromPrivateKey"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Client Service getAddressFromPrivateKey should return the address derived from the private key",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 2,
					"retryReasons": [],
					"status": "passed",
					"title": "should return the address derived from the private key"
				}
			],
			"endTime": 1748058917088,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/services/clients.test.ts",
			"startTime": 1748058917074,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Config Module Initialization", "formatPrivateKey"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization formatPrivateKey should return undefined for empty string",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return undefined for empty string"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "formatPrivateKey"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization formatPrivateKey should return undefined for undefined",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return undefined for undefined"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "formatPrivateKey"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization formatPrivateKey should add 0x prefix if missing",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should add 0x prefix if missing"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "formatPrivateKey"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization formatPrivateKey should not modify key if 0x prefix exists",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should not modify key if 0x prefix exists"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "initializeConfig"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization initializeConfig should set privateKey to undefined when PRIVATE_KEY is not set",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should set privateKey to undefined when PRIVATE_KEY is not set"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "initializeConfig"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization initializeConfig should set privateKey to undefined when PRIVATE_KEY is empty",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should set privateKey to undefined when PRIVATE_KEY is empty"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "initializeConfig"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization initializeConfig should set privateKey correctly when PRIVATE_KEY is valid without 0x prefix",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should set privateKey correctly when PRIVATE_KEY is valid without 0x prefix"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "initializeConfig"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization initializeConfig should set privateKey correctly when PRIVATE_KEY is valid with 0x prefix",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should set privateKey correctly when PRIVATE_KEY is valid with 0x prefix"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "initializeConfig"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization initializeConfig should handle parsing failure",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should handle parsing failure"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "getPrivateKeyAsHex"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization getPrivateKeyAsHex should return undefined if private key is not set",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return undefined if private key is not set"
				},
				{
					"ancestorTitles": ["Config Module Initialization", "getPrivateKeyAsHex"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module Initialization getPrivateKeyAsHex should return private key as Hex if set",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return private key as Hex if set"
				}
			],
			"endTime": 1748058917102,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/config.mock.test.ts",
			"startTime": 1748058917090,
			"status": "passed",
			"summary": ""
		},
		{
			"assertionResults": [
				{
					"ancestorTitles": ["Config Module", "formatPrivateKey"],
					"duration": 1,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module formatPrivateKey should add 0x prefix if missing",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should add 0x prefix if missing"
				},
				{
					"ancestorTitles": ["Config Module", "formatPrivateKey"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module formatPrivateKey should not modify key if 0x prefix exists",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should not modify key if 0x prefix exists"
				},
				{
					"ancestorTitles": ["Config Module", "getPrivateKeyAsHex"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module getPrivateKeyAsHex should return undefined if private key is not set",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return undefined if private key is not set"
				},
				{
					"ancestorTitles": ["Config Module", "getPrivateKeyAsHex"],
					"duration": 0,
					"failureDetails": [],
					"failureMessages": [],
					"fullName": "Config Module getPrivateKeyAsHex should return private key as Hex if set",
					"invocations": 1,
					"location": null,
					"numPassingAsserts": 1,
					"retryReasons": [],
					"status": "passed",
					"title": "should return private key as Hex if set"
				}
			],
			"endTime": 1748058917115,
			"message": "",
			"name": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/config.test.ts",
			"startTime": 1748058917103,
			"status": "passed",
			"summary": ""
		}
	],
	"wasInterrupted": false,
	"coverageMap": {
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/chains.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/chains.ts",
			"statementMap": {
				"0": { "start": { "line": 35, "column": 0 }, "end": { "line": 35, "column": 16 } },
				"1": { "start": { "line": 64, "column": 0 }, "end": { "line": 64, "column": 16 } },
				"2": { "start": { "line": 85, "column": 0 }, "end": { "line": 85, "column": 16 } },
				"3": { "start": { "line": 95, "column": 0 }, "end": { "line": 95, "column": 16 } },
				"4": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 57 } },
				"5": { "start": { "line": 5, "column": 13 }, "end": { "line": 5, "column": 37 } },
				"6": { "start": { "line": 6, "column": 13 }, "end": { "line": 6, "column": 62 } },
				"7": { "start": { "line": 7, "column": 13 }, "end": { "line": 7, "column": 37 } },
				"8": { "start": { "line": 10, "column": 13 }, "end": { "line": 14, "column": 2 } },
				"9": { "start": { "line": 17, "column": 13 }, "end": { "line": 21, "column": 2 } },
				"10": { "start": { "line": 24, "column": 13 }, "end": { "line": 28, "column": 2 } },
				"11": { "start": { "line": 36, "column": 1 }, "end": { "line": 38, "column": 2 } },
				"12": { "start": { "line": 37, "column": 2 }, "end": { "line": 37, "column": 25 } },
				"13": { "start": { "line": 41, "column": 21 }, "end": { "line": 41, "column": 50 } },
				"14": { "start": { "line": 44, "column": 1 }, "end": { "line": 46, "column": 2 } },
				"15": { "start": { "line": 45, "column": 2 }, "end": { "line": 45, "column": 37 } },
				"16": { "start": { "line": 49, "column": 18 }, "end": { "line": 49, "column": 46 } },
				"17": { "start": { "line": 50, "column": 1 }, "end": { "line": 52, "column": 2 } },
				"18": { "start": { "line": 51, "column": 2 }, "end": { "line": 51, "column": 18 } },
				"19": { "start": { "line": 55, "column": 1 }, "end": { "line": 55, "column": 25 } },
				"20": { "start": { "line": 65, "column": 1 }, "end": { "line": 74, "column": 2 } },
				"21": { "start": { "line": 66, "column": 22 }, "end": { "line": 66, "column": 51 } },
				"22": { "start": { "line": 68, "column": 2 }, "end": { "line": 70, "column": 3 } },
				"23": { "start": { "line": 69, "column": 3 }, "end": { "line": 69, "column": 55 } },
				"24": { "start": { "line": 73, "column": 2 }, "end": { "line": 73, "column": 61 } },
				"25": { "start": { "line": 77, "column": 1 }, "end": { "line": 77, "column": 41 } },
				"26": { "start": { "line": 86, "column": 17 }, "end": { "line": 86, "column": 104 } },
				"27": { "start": { "line": 88, "column": 1 }, "end": { "line": 88, "column": 46 } },
				"28": { "start": { "line": 96, "column": 1 }, "end": { "line": 98, "column": 10 } },
				"29": { "start": { "line": 97, "column": 20 }, "end": { "line": 97, "column": 35 } }
			},
			"fnMap": {
				"0": {
					"name": "resolveChainId",
					"decl": { "start": { "line": 35, "column": 16 }, "end": { "line": 35, "column": 30 } },
					"loc": { "start": { "line": 35, "column": 63 }, "end": { "line": 56, "column": 1 } }
				},
				"1": {
					"name": "getChain",
					"decl": { "start": { "line": 64, "column": 16 }, "end": { "line": 64, "column": 24 } },
					"loc": { "start": { "line": 64, "column": 76 }, "end": { "line": 78, "column": 1 } }
				},
				"2": {
					"name": "getRpcUrl",
					"decl": { "start": { "line": 85, "column": 16 }, "end": { "line": 85, "column": 25 } },
					"loc": { "start": { "line": 85, "column": 77 }, "end": { "line": 89, "column": 1 } }
				},
				"3": {
					"name": "getSupportedNetworks",
					"decl": { "start": { "line": 95, "column": 16 }, "end": { "line": 95, "column": 36 } },
					"loc": { "start": { "line": 95, "column": 36 }, "end": { "line": 99, "column": 1 } }
				},
				"4": {
					"name": "(anonymous_4)",
					"decl": { "start": { "line": 97, "column": 10 }, "end": { "line": 97, "column": 11 } },
					"loc": { "start": { "line": 97, "column": 20 }, "end": { "line": 97, "column": 35 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 36, "column": 1 }, "end": { "line": 38, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 36, "column": 1 }, "end": { "line": 38, "column": 2 } }]
				},
				"1": {
					"loc": { "start": { "line": 44, "column": 1 }, "end": { "line": 46, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 44, "column": 1 }, "end": { "line": 46, "column": 2 } }]
				},
				"2": {
					"loc": { "start": { "line": 50, "column": 1 }, "end": { "line": 52, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 50, "column": 1 }, "end": { "line": 52, "column": 2 } }]
				},
				"3": {
					"loc": { "start": { "line": 64, "column": 25 }, "end": { "line": 64, "column": 76 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 64, "column": 60 }, "end": { "line": 64, "column": 76 } }]
				},
				"4": {
					"loc": { "start": { "line": 65, "column": 1 }, "end": { "line": 74, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 65, "column": 1 }, "end": { "line": 74, "column": 2 } }]
				},
				"5": {
					"loc": { "start": { "line": 68, "column": 2 }, "end": { "line": 70, "column": 3 } },
					"type": "if",
					"locations": [{ "start": { "line": 68, "column": 2 }, "end": { "line": 70, "column": 3 } }]
				},
				"6": {
					"loc": { "start": { "line": 69, "column": 10 }, "end": { "line": 69, "column": 54 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 69, "column": 10 }, "end": { "line": 69, "column": 47 } },
						{ "start": { "line": 69, "column": 51 }, "end": { "line": 69, "column": 54 } }
					]
				},
				"7": {
					"loc": { "start": { "line": 77, "column": 8 }, "end": { "line": 77, "column": 40 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 77, "column": 8 }, "end": { "line": 77, "column": 33 } },
						{ "start": { "line": 77, "column": 37 }, "end": { "line": 77, "column": 40 } }
					]
				},
				"8": {
					"loc": { "start": { "line": 85, "column": 26 }, "end": { "line": 85, "column": 77 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 85, "column": 61 }, "end": { "line": 85, "column": 77 } }]
				},
				"9": {
					"loc": { "start": { "line": 86, "column": 17 }, "end": { "line": 86, "column": 104 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 86, "column": 55 }, "end": { "line": 86, "column": 86 } },
						{ "start": { "line": 86, "column": 89 }, "end": { "line": 86, "column": 104 } }
					]
				},
				"10": {
					"loc": { "start": { "line": 88, "column": 8 }, "end": { "line": 88, "column": 45 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 88, "column": 8 }, "end": { "line": 88, "column": 26 } },
						{ "start": { "line": 88, "column": 30 }, "end": { "line": 88, "column": 45 } }
					]
				}
			},
			"s": {
				"0": 12,
				"1": 12,
				"2": 12,
				"3": 12,
				"4": 12,
				"5": 12,
				"6": 12,
				"7": 12,
				"8": 12,
				"9": 12,
				"10": 12,
				"11": 16,
				"12": 3,
				"13": 13,
				"14": 13,
				"15": 9,
				"16": 4,
				"17": 4,
				"18": 3,
				"19": 1,
				"20": 14,
				"21": 9,
				"22": 9,
				"23": 7,
				"24": 2,
				"25": 5,
				"26": 8,
				"27": 8,
				"28": 1,
				"29": 3
			},
			"f": { "0": 16, "1": 14, "2": 8, "3": 1, "4": 3 },
			"b": { "0": [3], "1": [9], "2": [3], "3": [1], "4": [9], "5": [7], "6": [7, 1], "7": [5, 1], "8": [1], "9": [3, 5], "10": [8, 1] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/config.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/config.ts",
			"statementMap": {
				"0": { "start": { "line": 34, "column": 0 }, "end": { "line": 34, "column": 16 } },
				"1": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 28 } },
				"2": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 24 } },
				"3": { "start": { "line": 6, "column": 0 }, "end": { "line": 6, "column": 16 } },
				"4": { "start": { "line": 9, "column": 18 }, "end": { "line": 11, "column": 2 } },
				"5": { "start": { "line": 14, "column": 12 }, "end": { "line": 14, "column": 44 } },
				"6": { "start": { "line": 17, "column": 25 }, "end": { "line": 22, "column": 1 } },
				"7": { "start": { "line": 18, "column": 1 }, "end": { "line": 18, "column": 28 } },
				"8": { "start": { "line": 18, "column": 11 }, "end": { "line": 18, "column": 28 } },
				"9": { "start": { "line": 21, "column": 1 }, "end": { "line": 21, "column": 48 } },
				"10": { "start": { "line": 25, "column": 13 }, "end": { "line": 27, "column": 2 } },
				"11": { "start": { "line": 35, "column": 1 }, "end": { "line": 35, "column": 45 } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_1)",
					"decl": { "start": { "line": 17, "column": 25 }, "end": { "line": 17, "column": 26 } },
					"loc": { "start": { "line": 17, "column": 62 }, "end": { "line": 22, "column": 1 } }
				},
				"1": {
					"name": "getPrivateKeyAsHex",
					"decl": { "start": { "line": 34, "column": 16 }, "end": { "line": 34, "column": 34 } },
					"loc": { "start": { "line": 34, "column": 34 }, "end": { "line": 36, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 18, "column": 1 }, "end": { "line": 18, "column": 28 } },
					"type": "if",
					"locations": [{ "start": { "line": 18, "column": 1 }, "end": { "line": 18, "column": 28 } }]
				},
				"1": {
					"loc": { "start": { "line": 21, "column": 8 }, "end": { "line": 21, "column": 47 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 21, "column": 31 }, "end": { "line": 21, "column": 34 } },
						{ "start": { "line": 21, "column": 37 }, "end": { "line": 21, "column": 47 } }
					]
				},
				"2": {
					"loc": { "start": { "line": 26, "column": 13 }, "end": { "line": 26, "column": 77 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 26, "column": 27 }, "end": { "line": 26, "column": 65 } },
						{ "start": { "line": 26, "column": 68 }, "end": { "line": 26, "column": 77 } }
					]
				}
			},
			"s": { "0": 5, "1": 5, "2": 5, "3": 5, "4": 5, "5": 5, "6": 5, "7": 5, "8": 0, "9": 5, "10": 5, "11": 2 },
			"f": { "0": 5, "1": 2 },
			"b": { "0": [0], "1": [5, 0], "2": [5, 0] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/tools.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/tools.ts",
			"statementMap": {
				"0": { "start": { "line": 13, "column": 0 }, "end": { "line": 13, "column": 16 } },
				"1": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 24 } },
				"2": { "start": { "line": 4, "column": 0 }, "end": { "line": 4, "column": 79 } },
				"3": { "start": { "line": 5, "column": 0 }, "end": { "line": 5, "column": 49 } },
				"4": { "start": { "line": 6, "column": 0 }, "end": { "line": 6, "column": 48 } },
				"5": { "start": { "line": 17, "column": 1 }, "end": { "line": 61, "column": 3 } },
				"6": { "start": { "line": 27, "column": 3 }, "end": { "line": 59, "column": 4 } },
				"7": { "start": { "line": 28, "column": 20 }, "end": { "line": 28, "column": 54 } },
				"8": { "start": { "line": 29, "column": 24 }, "end": { "line": 29, "column": 62 } },
				"9": { "start": { "line": 30, "column": 19 }, "end": { "line": 30, "column": 37 } },
				"10": { "start": { "line": 32, "column": 4 }, "end": { "line": 48, "column": 6 } },
				"11": { "start": { "line": 50, "column": 4 }, "end": { "line": 58, "column": 6 } },
				"12": { "start": { "line": 64, "column": 1 }, "end": { "line": 93, "column": 4 } },
				"13": { "start": { "line": 65, "column": 2 }, "end": { "line": 92, "column": 3 } },
				"14": { "start": { "line": 66, "column": 20 }, "end": { "line": 66, "column": 42 } },
				"15": { "start": { "line": 68, "column": 3 }, "end": { "line": 81, "column": 5 } },
				"16": { "start": { "line": 83, "column": 3 }, "end": { "line": 91, "column": 5 } },
				"17": { "start": { "line": 98, "column": 1 }, "end": { "line": 129, "column": 3 } },
				"18": { "start": { "line": 106, "column": 3 }, "end": { "line": 127, "column": 4 } },
				"19": { "start": { "line": 107, "column": 18 }, "end": { "line": 107, "column": 71 } },
				"20": { "start": { "line": 109, "column": 4 }, "end": { "line": 116, "column": 6 } },
				"21": { "start": { "line": 118, "column": 4 }, "end": { "line": 126, "column": 6 } },
				"22": { "start": { "line": 132, "column": 1 }, "end": { "line": 162, "column": 3 } },
				"23": { "start": { "line": 139, "column": 3 }, "end": { "line": 160, "column": 4 } },
				"24": { "start": { "line": 140, "column": 18 }, "end": { "line": 140, "column": 56 } },
				"25": { "start": { "line": 142, "column": 4 }, "end": { "line": 149, "column": 6 } },
				"26": { "start": { "line": 151, "column": 4 }, "end": { "line": 159, "column": 6 } },
				"27": { "start": { "line": 167, "column": 1 }, "end": { "line": 210, "column": 3 } },
				"28": { "start": { "line": 178, "column": 3 }, "end": { "line": 208, "column": 4 } },
				"29": { "start": { "line": 179, "column": 20 }, "end": { "line": 179, "column": 63 } },
				"30": { "start": { "line": 181, "column": 4 }, "end": { "line": 197, "column": 6 } },
				"31": { "start": { "line": 199, "column": 4 }, "end": { "line": 207, "column": 6 } },
				"32": { "start": { "line": 213, "column": 1 }, "end": { "line": 258, "column": 3 } },
				"33": { "start": { "line": 222, "column": 3 }, "end": { "line": 256, "column": 4 } },
				"34": { "start": { "line": 223, "column": 20 }, "end": { "line": 223, "column": 104 } },
				"35": { "start": { "line": 225, "column": 4 }, "end": { "line": 245, "column": 6 } },
				"36": { "start": { "line": 247, "column": 4 }, "end": { "line": 255, "column": 6 } },
				"37": { "start": { "line": 261, "column": 1 }, "end": { "line": 308, "column": 3 } },
				"38": { "start": { "line": 273, "column": 3 }, "end": { "line": 306, "column": 4 } },
				"39": { "start": { "line": 274, "column": 20 }, "end": { "line": 274, "column": 87 } },
				"40": { "start": { "line": 276, "column": 4 }, "end": { "line": 295, "column": 6 } },
				"41": { "start": { "line": 297, "column": 4 }, "end": { "line": 305, "column": 6 } },
				"42": { "start": { "line": 313, "column": 1 }, "end": { "line": 344, "column": 3 } },
				"43": { "start": { "line": 321, "column": 3 }, "end": { "line": 342, "column": 4 } },
				"44": { "start": { "line": 322, "column": 15 }, "end": { "line": 322, "column": 69 } },
				"45": { "start": { "line": 324, "column": 4 }, "end": { "line": 331, "column": 6 } },
				"46": { "start": { "line": 333, "column": 4 }, "end": { "line": 341, "column": 6 } },
				"47": { "start": { "line": 347, "column": 1 }, "end": { "line": 378, "column": 3 } },
				"48": { "start": { "line": 355, "column": 3 }, "end": { "line": 376, "column": 4 } },
				"49": { "start": { "line": 356, "column": 20 }, "end": { "line": 356, "column": 81 } },
				"50": { "start": { "line": 358, "column": 4 }, "end": { "line": 365, "column": 6 } },
				"51": { "start": { "line": 367, "column": 4 }, "end": { "line": 375, "column": 6 } },
				"52": { "start": { "line": 381, "column": 1 }, "end": { "line": 431, "column": 3 } },
				"53": { "start": { "line": 391, "column": 3 }, "end": { "line": 429, "column": 4 } },
				"54": { "start": { "line": 392, "column": 74 }, "end": { "line": 392, "column": 95 } },
				"55": { "start": { "line": 394, "column": 4 }, "end": { "line": 396, "column": 5 } },
				"56": { "start": { "line": 395, "column": 5 }, "end": { "line": 395, "column": 55 } },
				"57": { "start": { "line": 398, "column": 4 }, "end": { "line": 400, "column": 5 } },
				"58": { "start": { "line": 399, "column": 5 }, "end": { "line": 399, "column": 41 } },
				"59": { "start": { "line": 402, "column": 16 }, "end": { "line": 402, "column": 59 } },
				"60": { "start": { "line": 404, "column": 4 }, "end": { "line": 418, "column": 6 } },
				"61": { "start": { "line": 420, "column": 4 }, "end": { "line": 428, "column": 6 } },
				"62": { "start": { "line": 436, "column": 1 }, "end": { "line": 478, "column": 3 } },
				"63": { "start": { "line": 445, "column": 3 }, "end": { "line": 476, "column": 4 } },
				"64": { "start": { "line": 446, "column": 19 }, "end": { "line": 446, "column": 66 } },
				"65": { "start": { "line": 448, "column": 4 }, "end": { "line": 465, "column": 6 } },
				"66": { "start": { "line": 467, "column": 4 }, "end": { "line": 475, "column": 6 } },
				"67": { "start": { "line": 481, "column": 1 }, "end": { "line": 526, "column": 3 } },
				"68": { "start": { "line": 491, "column": 3 }, "end": { "line": 524, "column": 4 } },
				"69": { "start": { "line": 492, "column": 19 }, "end": { "line": 492, "column": 89 } },
				"70": { "start": { "line": 494, "column": 4 }, "end": { "line": 513, "column": 6 } },
				"71": { "start": { "line": 515, "column": 4 }, "end": { "line": 523, "column": 6 } },
				"72": { "start": { "line": 529, "column": 1 }, "end": { "line": 578, "column": 3 } },
				"73": { "start": { "line": 543, "column": 3 }, "end": { "line": 576, "column": 4 } },
				"74": { "start": { "line": 544, "column": 19 }, "end": { "line": 544, "column": 93 } },
				"75": { "start": { "line": 546, "column": 4 }, "end": { "line": 565, "column": 6 } },
				"76": { "start": { "line": 567, "column": 4 }, "end": { "line": 575, "column": 6 } },
				"77": { "start": { "line": 581, "column": 1 }, "end": { "line": 630, "column": 3 } },
				"78": { "start": { "line": 594, "column": 3 }, "end": { "line": 628, "column": 4 } },
				"79": { "start": { "line": 595, "column": 19 }, "end": { "line": 595, "column": 99 } },
				"80": { "start": { "line": 597, "column": 4 }, "end": { "line": 617, "column": 6 } },
				"81": { "start": { "line": 619, "column": 4 }, "end": { "line": 627, "column": 6 } },
				"82": { "start": { "line": 633, "column": 1 }, "end": { "line": 682, "column": 3 } },
				"83": { "start": { "line": 647, "column": 3 }, "end": { "line": 680, "column": 4 } },
				"84": { "start": { "line": 648, "column": 19 }, "end": { "line": 648, "column": 108 } },
				"85": { "start": { "line": 650, "column": 4 }, "end": { "line": 669, "column": 6 } },
				"86": { "start": { "line": 671, "column": 4 }, "end": { "line": 679, "column": 6 } },
				"87": { "start": { "line": 685, "column": 1 }, "end": { "line": 733, "column": 3 } },
				"88": { "start": { "line": 698, "column": 3 }, "end": { "line": 731, "column": 4 } },
				"89": { "start": { "line": 699, "column": 19 }, "end": { "line": 699, "column": 89 } },
				"90": { "start": { "line": 701, "column": 4 }, "end": { "line": 720, "column": 6 } },
				"91": { "start": { "line": 722, "column": 4 }, "end": { "line": 730, "column": 6 } },
				"92": { "start": { "line": 738, "column": 1 }, "end": { "line": 782, "column": 3 } },
				"93": { "start": { "line": 749, "column": 3 }, "end": { "line": 780, "column": 4 } },
				"94": { "start": { "line": 751, "column": 22 }, "end": { "line": 751, "column": 69 } },
				"95": { "start": { "line": 753, "column": 19 }, "end": { "line": 758, "column": 6 } },
				"96": { "start": { "line": 760, "column": 19 }, "end": { "line": 760, "column": 63 } },
				"97": { "start": { "line": 762, "column": 4 }, "end": { "line": 769, "column": 6 } },
				"98": { "start": { "line": 771, "column": 4 }, "end": { "line": 779, "column": 6 } },
				"99": { "start": { "line": 785, "column": 1 }, "end": { "line": 839, "column": 3 } },
				"100": { "start": { "line": 796, "column": 3 }, "end": { "line": 837, "column": 4 } },
				"101": { "start": { "line": 798, "column": 22 }, "end": { "line": 798, "column": 69 } },
				"102": { "start": { "line": 800, "column": 52 }, "end": { "line": 807, "column": 6 } },
				"103": { "start": { "line": 809, "column": 19 }, "end": { "line": 809, "column": 72 } },
				"104": { "start": { "line": 811, "column": 4 }, "end": { "line": 826, "column": 6 } },
				"105": { "start": { "line": 828, "column": 4 }, "end": { "line": 836, "column": 6 } },
				"106": { "start": { "line": 842, "column": 1 }, "end": { "line": 885, "column": 3 } },
				"107": { "start": { "line": 853, "column": 3 }, "end": { "line": 883, "column": 4 } },
				"108": { "start": { "line": 854, "column": 23 }, "end": { "line": 854, "column": 66 } },
				"109": { "start": { "line": 856, "column": 4 }, "end": { "line": 872, "column": 6 } },
				"110": { "start": { "line": 874, "column": 4 }, "end": { "line": 882, "column": 6 } },
				"111": { "start": { "line": 888, "column": 1 }, "end": { "line": 927, "column": 3 } },
				"112": { "start": { "line": 896, "column": 3 }, "end": { "line": 925, "column": 4 } },
				"113": { "start": { "line": 897, "column": 22 }, "end": { "line": 897, "column": 88 } },
				"114": { "start": { "line": 899, "column": 4 }, "end": { "line": 914, "column": 6 } },
				"115": { "start": { "line": 916, "column": 4 }, "end": { "line": 924, "column": 6 } },
				"116": { "start": { "line": 930, "column": 1 }, "end": { "line": 975, "column": 3 } },
				"117": { "start": { "line": 939, "column": 3 }, "end": { "line": 973, "column": 4 } },
				"118": { "start": { "line": 940, "column": 20 }, "end": { "line": 940, "column": 104 } },
				"119": { "start": { "line": 942, "column": 4 }, "end": { "line": 962, "column": 6 } },
				"120": { "start": { "line": 964, "column": 4 }, "end": { "line": 972, "column": 6 } },
				"121": { "start": { "line": 978, "column": 1 }, "end": { "line": 1042, "column": 3 } },
				"122": { "start": { "line": 987, "column": 3 }, "end": { "line": 1040, "column": 4 } },
				"123": { "start": { "line": 988, "column": 20 }, "end": { "line": 988, "column": 108 } },
				"124": { "start": { "line": 991, "column": 38 }, "end": { "line": 991, "column": 42 } },
				"125": { "start": { "line": 992, "column": 4 }, "end": { "line": 1010, "column": 5 } },
				"126": { "start": { "line": 994, "column": 5 }, "end": { "line": 1007, "column": 8 } },
				"127": { "start": { "line": 1012, "column": 4 }, "end": { "line": 1029, "column": 6 } },
				"128": { "start": { "line": 1031, "column": 4 }, "end": { "line": 1039, "column": 6 } },
				"129": { "start": { "line": 1045, "column": 1 }, "end": { "line": 1092, "column": 3 } },
				"130": { "start": { "line": 1058, "column": 3 }, "end": { "line": 1090, "column": 4 } },
				"131": { "start": { "line": 1059, "column": 20 }, "end": { "line": 1059, "column": 99 } },
				"132": { "start": { "line": 1061, "column": 4 }, "end": { "line": 1079, "column": 6 } },
				"133": { "start": { "line": 1081, "column": 4 }, "end": { "line": 1089, "column": 6 } },
				"134": { "start": { "line": 1095, "column": 1 }, "end": { "line": 1139, "column": 3 } },
				"135": { "start": { "line": 1107, "column": 3 }, "end": { "line": 1137, "column": 4 } },
				"136": { "start": { "line": 1108, "column": 16 }, "end": { "line": 1108, "column": 100 } },
				"137": { "start": { "line": 1110, "column": 4 }, "end": { "line": 1126, "column": 6 } },
				"138": { "start": { "line": 1128, "column": 4 }, "end": { "line": 1136, "column": 6 } },
				"139": { "start": { "line": 1142, "column": 1 }, "end": { "line": 1186, "column": 3 } },
				"140": { "start": { "line": 1154, "column": 3 }, "end": { "line": 1184, "column": 4 } },
				"141": { "start": { "line": 1155, "column": 20 }, "end": { "line": 1155, "column": 110 } },
				"142": { "start": { "line": 1157, "column": 4 }, "end": { "line": 1173, "column": 6 } },
				"143": { "start": { "line": 1175, "column": 4 }, "end": { "line": 1183, "column": 6 } },
				"144": { "start": { "line": 1189, "column": 1 }, "end": { "line": 1235, "column": 3 } },
				"145": { "start": { "line": 1202, "column": 3 }, "end": { "line": 1233, "column": 4 } },
				"146": { "start": { "line": 1203, "column": 20 }, "end": { "line": 1203, "column": 128 } },
				"147": { "start": { "line": 1205, "column": 4 }, "end": { "line": 1222, "column": 6 } },
				"148": { "start": { "line": 1224, "column": 4 }, "end": { "line": 1232, "column": 6 } },
				"149": { "start": { "line": 1240, "column": 1 }, "end": { "line": 1289, "column": 3 } },
				"150": { "start": { "line": 1246, "column": 3 }, "end": { "line": 1287, "column": 4 } },
				"151": { "start": { "line": 1247, "column": 28 }, "end": { "line": 1247, "column": 48 } },
				"152": { "start": { "line": 1248, "column": 4 }, "end": { "line": 1258, "column": 5 } },
				"153": { "start": { "line": 1249, "column": 5 }, "end": { "line": 1257, "column": 7 } },
				"154": { "start": { "line": 1260, "column": 20 }, "end": { "line": 1260, "column": 70 } },
				"155": { "start": { "line": 1262, "column": 4 }, "end": { "line": 1276, "column": 6 } },
				"156": { "start": { "line": 1278, "column": 4 }, "end": { "line": 1286, "column": 6 } }
			},
			"fnMap": {
				"0": {
					"name": "registerEVMTools",
					"decl": { "start": { "line": 13, "column": 16 }, "end": { "line": 13, "column": 32 } },
					"loc": { "start": { "line": 13, "column": 50 }, "end": { "line": 1290, "column": 1 } }
				},
				"1": {
					"name": "(anonymous_10)",
					"decl": { "start": { "line": 26, "column": 2 }, "end": { "line": 26, "column": 7 } },
					"loc": { "start": { "line": 26, "column": 42 }, "end": { "line": 60, "column": 3 } }
				},
				"2": {
					"name": "(anonymous_11)",
					"decl": { "start": { "line": 64, "column": 83 }, "end": { "line": 64, "column": 88 } },
					"loc": { "start": { "line": 64, "column": 94 }, "end": { "line": 93, "column": 2 } }
				},
				"3": {
					"name": "(anonymous_12)",
					"decl": { "start": { "line": 105, "column": 2 }, "end": { "line": 105, "column": 7 } },
					"loc": { "start": { "line": 105, "column": 55 }, "end": { "line": 128, "column": 3 } }
				},
				"4": {
					"name": "(anonymous_13)",
					"decl": { "start": { "line": 138, "column": 2 }, "end": { "line": 138, "column": 7 } },
					"loc": { "start": { "line": 138, "column": 42 }, "end": { "line": 161, "column": 3 } }
				},
				"5": {
					"name": "(anonymous_14)",
					"decl": { "start": { "line": 177, "column": 2 }, "end": { "line": 177, "column": 7 } },
					"loc": { "start": { "line": 177, "column": 51 }, "end": { "line": 209, "column": 3 } }
				},
				"6": {
					"name": "(anonymous_15)",
					"decl": { "start": { "line": 221, "column": 2 }, "end": { "line": 221, "column": 7 } },
					"loc": { "start": { "line": 221, "column": 65 }, "end": { "line": 257, "column": 3 } }
				},
				"7": {
					"name": "(anonymous_16)",
					"decl": { "start": { "line": 272, "column": 2 }, "end": { "line": 272, "column": 7 } },
					"loc": { "start": { "line": 272, "column": 70 }, "end": { "line": 307, "column": 3 } }
				},
				"8": {
					"name": "(anonymous_17)",
					"decl": { "start": { "line": 320, "column": 2 }, "end": { "line": 320, "column": 7 } },
					"loc": { "start": { "line": 320, "column": 50 }, "end": { "line": 343, "column": 3 } }
				},
				"9": {
					"name": "(anonymous_18)",
					"decl": { "start": { "line": 354, "column": 2 }, "end": { "line": 354, "column": 7 } },
					"loc": { "start": { "line": 354, "column": 50 }, "end": { "line": 377, "column": 3 } }
				},
				"10": {
					"name": "(anonymous_19)",
					"decl": { "start": { "line": 390, "column": 2 }, "end": { "line": 390, "column": 7 } },
					"loc": { "start": { "line": 390, "column": 59 }, "end": { "line": 430, "column": 3 } }
				},
				"11": {
					"name": "(anonymous_20)",
					"decl": { "start": { "line": 444, "column": 2 }, "end": { "line": 444, "column": 7 } },
					"loc": { "start": { "line": 444, "column": 54 }, "end": { "line": 477, "column": 3 } }
				},
				"12": {
					"name": "(anonymous_21)",
					"decl": { "start": { "line": 490, "column": 2 }, "end": { "line": 490, "column": 7 } },
					"loc": { "start": { "line": 490, "column": 75 }, "end": { "line": 525, "column": 3 } }
				},
				"13": {
					"name": "(anonymous_22)",
					"decl": { "start": { "line": 542, "column": 2 }, "end": { "line": 542, "column": 7 } },
					"loc": { "start": { "line": 542, "column": 80 }, "end": { "line": 577, "column": 3 } }
				},
				"14": {
					"name": "(anonymous_23)",
					"decl": { "start": { "line": 593, "column": 2 }, "end": { "line": 593, "column": 7 } },
					"loc": { "start": { "line": 593, "column": 76 }, "end": { "line": 629, "column": 3 } }
				},
				"15": {
					"name": "(anonymous_24)",
					"decl": { "start": { "line": 646, "column": 2 }, "end": { "line": 646, "column": 7 } },
					"loc": { "start": { "line": 646, "column": 84 }, "end": { "line": 681, "column": 3 } }
				},
				"16": {
					"name": "(anonymous_25)",
					"decl": { "start": { "line": 697, "column": 2 }, "end": { "line": 697, "column": 7 } },
					"loc": { "start": { "line": 697, "column": 75 }, "end": { "line": 732, "column": 3 } }
				},
				"17": {
					"name": "(anonymous_26)",
					"decl": { "start": { "line": 748, "column": 2 }, "end": { "line": 748, "column": 7 } },
					"loc": { "start": { "line": 748, "column": 89 }, "end": { "line": 781, "column": 3 } }
				},
				"18": {
					"name": "(anonymous_27)",
					"decl": { "start": { "line": 795, "column": 2 }, "end": { "line": 795, "column": 7 } },
					"loc": { "start": { "line": 795, "column": 84 }, "end": { "line": 838, "column": 3 } }
				},
				"19": {
					"name": "(anonymous_28)",
					"decl": { "start": { "line": 852, "column": 2 }, "end": { "line": 852, "column": 7 } },
					"loc": { "start": { "line": 852, "column": 51 }, "end": { "line": 884, "column": 3 } }
				},
				"20": {
					"name": "(anonymous_29)",
					"decl": { "start": { "line": 895, "column": 2 }, "end": { "line": 895, "column": 7 } },
					"loc": { "start": { "line": 895, "column": 56 }, "end": { "line": 926, "column": 3 } }
				},
				"21": {
					"name": "(anonymous_30)",
					"decl": { "start": { "line": 938, "column": 2 }, "end": { "line": 938, "column": 7 } },
					"loc": { "start": { "line": 938, "column": 65 }, "end": { "line": 974, "column": 3 } }
				},
				"22": {
					"name": "(anonymous_31)",
					"decl": { "start": { "line": 986, "column": 2 }, "end": { "line": 986, "column": 7 } },
					"loc": { "start": { "line": 986, "column": 65 }, "end": { "line": 1041, "column": 3 } }
				},
				"23": {
					"name": "(anonymous_32)",
					"decl": { "start": { "line": 1057, "column": 2 }, "end": { "line": 1057, "column": 7 } },
					"loc": { "start": { "line": 1057, "column": 79 }, "end": { "line": 1091, "column": 3 } }
				},
				"24": {
					"name": "(anonymous_33)",
					"decl": { "start": { "line": 1106, "column": 2 }, "end": { "line": 1106, "column": 7 } },
					"loc": { "start": { "line": 1106, "column": 65 }, "end": { "line": 1138, "column": 3 } }
				},
				"25": {
					"name": "(anonymous_34)",
					"decl": { "start": { "line": 1153, "column": 2 }, "end": { "line": 1153, "column": 7 } },
					"loc": { "start": { "line": 1153, "column": 70 }, "end": { "line": 1185, "column": 3 } }
				},
				"26": {
					"name": "(anonymous_35)",
					"decl": { "start": { "line": 1201, "column": 2 }, "end": { "line": 1201, "column": 7 } },
					"loc": { "start": { "line": 1201, "column": 79 }, "end": { "line": 1234, "column": 3 } }
				},
				"27": {
					"name": "(anonymous_36)",
					"decl": { "start": { "line": 1244, "column": 2 }, "end": { "line": 1244, "column": 7 } },
					"loc": { "start": { "line": 1244, "column": 13 }, "end": { "line": 1288, "column": 3 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 26, "column": 11 }, "end": { "line": 26, "column": 36 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 26, "column": 21 }, "end": { "line": 26, "column": 36 } }]
				},
				"1": {
					"loc": { "start": { "line": 54, "column": 43 }, "end": { "line": 54, "column": 97 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 54, "column": 68 }, "end": { "line": 54, "column": 81 } },
						{ "start": { "line": 54, "column": 84 }, "end": { "line": 54, "column": 97 } }
					]
				},
				"2": {
					"loc": { "start": { "line": 87, "column": 50 }, "end": { "line": 87, "column": 104 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 87, "column": 75 }, "end": { "line": 87, "column": 88 } },
						{ "start": { "line": 87, "column": 91 }, "end": { "line": 87, "column": 104 } }
					]
				},
				"3": {
					"loc": { "start": { "line": 105, "column": 24 }, "end": { "line": 105, "column": 49 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 105, "column": 34 }, "end": { "line": 105, "column": 49 } }]
				},
				"4": {
					"loc": { "start": { "line": 122, "column": 53 }, "end": { "line": 122, "column": 107 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 122, "column": 78 }, "end": { "line": 122, "column": 91 } },
						{ "start": { "line": 122, "column": 94 }, "end": { "line": 122, "column": 107 } }
					]
				},
				"5": {
					"loc": { "start": { "line": 138, "column": 11 }, "end": { "line": 138, "column": 36 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 138, "column": 21 }, "end": { "line": 138, "column": 36 } }]
				},
				"6": {
					"loc": { "start": { "line": 155, "column": 45 }, "end": { "line": 155, "column": 99 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 155, "column": 70 }, "end": { "line": 155, "column": 83 } },
						{ "start": { "line": 155, "column": 86 }, "end": { "line": 155, "column": 99 } }
					]
				},
				"7": {
					"loc": { "start": { "line": 177, "column": 20 }, "end": { "line": 177, "column": 45 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 177, "column": 30 }, "end": { "line": 177, "column": 45 } }]
				},
				"8": {
					"loc": { "start": { "line": 203, "column": 40 }, "end": { "line": 203, "column": 94 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 203, "column": 65 }, "end": { "line": 203, "column": 78 } },
						{ "start": { "line": 203, "column": 81 }, "end": { "line": 203, "column": 94 } }
					]
				},
				"9": {
					"loc": { "start": { "line": 221, "column": 34 }, "end": { "line": 221, "column": 59 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 221, "column": 44 }, "end": { "line": 221, "column": 59 } }]
				},
				"10": {
					"loc": { "start": { "line": 251, "column": 61 }, "end": { "line": 251, "column": 115 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 251, "column": 86 }, "end": { "line": 251, "column": 99 } },
						{ "start": { "line": 251, "column": 102 }, "end": { "line": 251, "column": 115 } }
					]
				},
				"11": {
					"loc": { "start": { "line": 272, "column": 39 }, "end": { "line": 272, "column": 64 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 272, "column": 49 }, "end": { "line": 272, "column": 64 } }]
				},
				"12": {
					"loc": { "start": { "line": 301, "column": 46 }, "end": { "line": 301, "column": 100 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 301, "column": 71 }, "end": { "line": 301, "column": 84 } },
						{ "start": { "line": 301, "column": 87 }, "end": { "line": 301, "column": 100 } }
					]
				},
				"13": {
					"loc": { "start": { "line": 320, "column": 19 }, "end": { "line": 320, "column": 44 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 320, "column": 29 }, "end": { "line": 320, "column": 44 } }]
				},
				"14": {
					"loc": { "start": { "line": 337, "column": 54 }, "end": { "line": 337, "column": 108 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 337, "column": 79 }, "end": { "line": 337, "column": 92 } },
						{ "start": { "line": 337, "column": 95 }, "end": { "line": 337, "column": 108 } }
					]
				},
				"15": {
					"loc": { "start": { "line": 354, "column": 19 }, "end": { "line": 354, "column": 44 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 354, "column": 29 }, "end": { "line": 354, "column": 44 } }]
				},
				"16": {
					"loc": { "start": { "line": 371, "column": 62 }, "end": { "line": 371, "column": 116 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 371, "column": 87 }, "end": { "line": 371, "column": 100 } },
						{ "start": { "line": 371, "column": 103 }, "end": { "line": 371, "column": 116 } }
					]
				},
				"17": {
					"loc": { "start": { "line": 390, "column": 28 }, "end": { "line": 390, "column": 53 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 390, "column": 38 }, "end": { "line": 390, "column": 53 } }]
				},
				"18": {
					"loc": { "start": { "line": 394, "column": 4 }, "end": { "line": 396, "column": 5 } },
					"type": "if",
					"locations": [{ "start": { "line": 394, "column": 4 }, "end": { "line": 396, "column": 5 } }]
				},
				"19": {
					"loc": { "start": { "line": 398, "column": 4 }, "end": { "line": 400, "column": 5 } },
					"type": "if",
					"locations": [{ "start": { "line": 398, "column": 4 }, "end": { "line": 400, "column": 5 } }]
				},
				"20": {
					"loc": { "start": { "line": 424, "column": 38 }, "end": { "line": 424, "column": 92 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 424, "column": 63 }, "end": { "line": 424, "column": 76 } },
						{ "start": { "line": 424, "column": 79 }, "end": { "line": 424, "column": 92 } }
					]
				},
				"21": {
					"loc": { "start": { "line": 444, "column": 23 }, "end": { "line": 444, "column": 48 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 444, "column": 33 }, "end": { "line": 444, "column": 48 } }]
				},
				"22": {
					"loc": { "start": { "line": 471, "column": 40 }, "end": { "line": 471, "column": 94 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 471, "column": 65 }, "end": { "line": 471, "column": 78 } },
						{ "start": { "line": 471, "column": 81 }, "end": { "line": 471, "column": 94 } }
					]
				},
				"23": {
					"loc": { "start": { "line": 490, "column": 44 }, "end": { "line": 490, "column": 69 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 490, "column": 54 }, "end": { "line": 490, "column": 69 } }]
				},
				"24": {
					"loc": { "start": { "line": 519, "column": 49 }, "end": { "line": 519, "column": 103 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 519, "column": 74 }, "end": { "line": 519, "column": 87 } },
						{ "start": { "line": 519, "column": 90 }, "end": { "line": 519, "column": 103 } }
					]
				},
				"25": {
					"loc": { "start": { "line": 542, "column": 49 }, "end": { "line": 542, "column": 74 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 542, "column": 59 }, "end": { "line": 542, "column": 74 } }]
				},
				"26": {
					"loc": { "start": { "line": 571, "column": 48 }, "end": { "line": 571, "column": 102 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 571, "column": 73 }, "end": { "line": 571, "column": 86 } },
						{ "start": { "line": 571, "column": 89 }, "end": { "line": 571, "column": 102 } }
					]
				},
				"27": {
					"loc": { "start": { "line": 593, "column": 45 }, "end": { "line": 593, "column": 70 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 593, "column": 55 }, "end": { "line": 593, "column": 70 } }]
				},
				"28": {
					"loc": { "start": { "line": 623, "column": 40 }, "end": { "line": 623, "column": 94 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 623, "column": 65 }, "end": { "line": 623, "column": 78 } },
						{ "start": { "line": 623, "column": 81 }, "end": { "line": 623, "column": 94 } }
					]
				},
				"29": {
					"loc": { "start": { "line": 646, "column": 53 }, "end": { "line": 646, "column": 78 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 646, "column": 63 }, "end": { "line": 646, "column": 78 } }]
				},
				"30": {
					"loc": { "start": { "line": 675, "column": 51 }, "end": { "line": 675, "column": 105 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 675, "column": 76 }, "end": { "line": 675, "column": 89 } },
						{ "start": { "line": 675, "column": 92 }, "end": { "line": 675, "column": 105 } }
					]
				},
				"31": {
					"loc": { "start": { "line": 697, "column": 44 }, "end": { "line": 697, "column": 69 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 697, "column": 54 }, "end": { "line": 697, "column": 69 } }]
				},
				"32": {
					"loc": { "start": { "line": 726, "column": 43 }, "end": { "line": 726, "column": 97 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 726, "column": 68 }, "end": { "line": 726, "column": 81 } },
						{ "start": { "line": 726, "column": 84 }, "end": { "line": 726, "column": 97 } }
					]
				},
				"33": {
					"loc": { "start": { "line": 748, "column": 47 }, "end": { "line": 748, "column": 56 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 748, "column": 54 }, "end": { "line": 748, "column": 56 } }]
				},
				"34": {
					"loc": { "start": { "line": 748, "column": 58 }, "end": { "line": 748, "column": 83 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 748, "column": 68 }, "end": { "line": 748, "column": 83 } }]
				},
				"35": {
					"loc": { "start": { "line": 751, "column": 22 }, "end": { "line": 751, "column": 69 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 751, "column": 48 }, "end": { "line": 751, "column": 63 } },
						{ "start": { "line": 751, "column": 66 }, "end": { "line": 751, "column": 69 } }
					]
				},
				"36": {
					"loc": { "start": { "line": 775, "column": 40 }, "end": { "line": 775, "column": 94 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 775, "column": 65 }, "end": { "line": 775, "column": 78 } },
						{ "start": { "line": 775, "column": 81 }, "end": { "line": 775, "column": 94 } }
					]
				},
				"37": {
					"loc": { "start": { "line": 795, "column": 53 }, "end": { "line": 795, "column": 78 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 795, "column": 63 }, "end": { "line": 795, "column": 78 } }]
				},
				"38": {
					"loc": { "start": { "line": 798, "column": 22 }, "end": { "line": 798, "column": 69 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 798, "column": 48 }, "end": { "line": 798, "column": 63 } },
						{ "start": { "line": 798, "column": 66 }, "end": { "line": 798, "column": 69 } }
					]
				},
				"39": {
					"loc": { "start": { "line": 832, "column": 43 }, "end": { "line": 832, "column": 97 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 832, "column": 68 }, "end": { "line": 832, "column": 81 } },
						{ "start": { "line": 832, "column": 84 }, "end": { "line": 832, "column": 97 } }
					]
				},
				"40": {
					"loc": { "start": { "line": 852, "column": 20 }, "end": { "line": 852, "column": 45 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 852, "column": 30 }, "end": { "line": 852, "column": 45 } }]
				},
				"41": {
					"loc": { "start": { "line": 865, "column": 15 }, "end": { "line": 865, "column": 73 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 865, "column": 28 }, "end": { "line": 865, "column": 38 } },
						{ "start": { "line": 865, "column": 41 }, "end": { "line": 865, "column": 73 } }
					]
				},
				"42": {
					"loc": { "start": { "line": 878, "column": 57 }, "end": { "line": 878, "column": 111 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 878, "column": 82 }, "end": { "line": 878, "column": 95 } },
						{ "start": { "line": 878, "column": 98 }, "end": { "line": 878, "column": 111 } }
					]
				},
				"43": {
					"loc": { "start": { "line": 895, "column": 25 }, "end": { "line": 895, "column": 50 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 895, "column": 35 }, "end": { "line": 895, "column": 50 } }]
				},
				"44": {
					"loc": { "start": { "line": 920, "column": 43 }, "end": { "line": 920, "column": 97 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 920, "column": 68 }, "end": { "line": 920, "column": 81 } },
						{ "start": { "line": 920, "column": 84 }, "end": { "line": 920, "column": 97 } }
					]
				},
				"45": {
					"loc": { "start": { "line": 938, "column": 34 }, "end": { "line": 938, "column": 59 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 938, "column": 44 }, "end": { "line": 938, "column": 59 } }]
				},
				"46": {
					"loc": { "start": { "line": 968, "column": 61 }, "end": { "line": 968, "column": 115 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 968, "column": 86 }, "end": { "line": 968, "column": 99 } },
						{ "start": { "line": 968, "column": 102 }, "end": { "line": 968, "column": 115 } }
					]
				},
				"47": {
					"loc": { "start": { "line": 986, "column": 34 }, "end": { "line": 986, "column": 59 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 986, "column": 44 }, "end": { "line": 986, "column": 59 } }]
				},
				"48": {
					"loc": { "start": { "line": 1022, "column": 16 }, "end": { "line": 1022, "column": 34 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 1022, "column": 16 }, "end": { "line": 1022, "column": 21 } },
						{ "start": { "line": 1022, "column": 25 }, "end": { "line": 1022, "column": 34 } }
					]
				},
				"49": {
					"loc": { "start": { "line": 1035, "column": 41 }, "end": { "line": 1035, "column": 95 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1035, "column": 66 }, "end": { "line": 1035, "column": 79 } },
						{ "start": { "line": 1035, "column": 82 }, "end": { "line": 1035, "column": 95 } }
					]
				},
				"50": {
					"loc": { "start": { "line": 1057, "column": 48 }, "end": { "line": 1057, "column": 73 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 1057, "column": 58 }, "end": { "line": 1057, "column": 73 } }]
				},
				"51": {
					"loc": { "start": { "line": 1072, "column": 17 }, "end": { "line": 1072, "column": 84 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1072, "column": 27 }, "end": { "line": 1072, "column": 50 } },
						{ "start": { "line": 1072, "column": 53 }, "end": { "line": 1072, "column": 84 } }
					]
				},
				"52": {
					"loc": { "start": { "line": 1085, "column": 46 }, "end": { "line": 1085, "column": 100 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1085, "column": 71 }, "end": { "line": 1085, "column": 84 } },
						{ "start": { "line": 1085, "column": 87 }, "end": { "line": 1085, "column": 100 } }
					]
				},
				"53": {
					"loc": { "start": { "line": 1106, "column": 34 }, "end": { "line": 1106, "column": 59 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 1106, "column": 44 }, "end": { "line": 1106, "column": 59 } }]
				},
				"54": {
					"loc": { "start": { "line": 1132, "column": 50 }, "end": { "line": 1132, "column": 104 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1132, "column": 75 }, "end": { "line": 1132, "column": 88 } },
						{ "start": { "line": 1132, "column": 91 }, "end": { "line": 1132, "column": 104 } }
					]
				},
				"55": {
					"loc": { "start": { "line": 1153, "column": 39 }, "end": { "line": 1153, "column": 64 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 1153, "column": 49 }, "end": { "line": 1153, "column": 64 } }]
				},
				"56": {
					"loc": { "start": { "line": 1179, "column": 44 }, "end": { "line": 1179, "column": 98 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1179, "column": 69 }, "end": { "line": 1179, "column": 82 } },
						{ "start": { "line": 1179, "column": 85 }, "end": { "line": 1179, "column": 98 } }
					]
				},
				"57": {
					"loc": { "start": { "line": 1201, "column": 48 }, "end": { "line": 1201, "column": 73 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 1201, "column": 58 }, "end": { "line": 1201, "column": 73 } }]
				},
				"58": {
					"loc": { "start": { "line": 1228, "column": 54 }, "end": { "line": 1228, "column": 108 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1228, "column": 79 }, "end": { "line": 1228, "column": 92 } },
						{ "start": { "line": 1228, "column": 95 }, "end": { "line": 1228, "column": 108 } }
					]
				},
				"59": {
					"loc": { "start": { "line": 1248, "column": 4 }, "end": { "line": 1258, "column": 5 } },
					"type": "if",
					"locations": [{ "start": { "line": 1248, "column": 4 }, "end": { "line": 1258, "column": 5 } }]
				},
				"60": {
					"loc": { "start": { "line": 1282, "column": 57 }, "end": { "line": 1282, "column": 111 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 1282, "column": 82 }, "end": { "line": 1282, "column": 95 } },
						{ "start": { "line": 1282, "column": 98 }, "end": { "line": 1282, "column": 111 } }
					]
				}
			},
			"s": {
				"0": 2,
				"1": 2,
				"2": 2,
				"3": 2,
				"4": 2,
				"5": 24,
				"6": 4,
				"7": 4,
				"8": 2,
				"9": 2,
				"10": 2,
				"11": 2,
				"12": 24,
				"13": 4,
				"14": 4,
				"15": 2,
				"16": 2,
				"17": 24,
				"18": 4,
				"19": 4,
				"20": 2,
				"21": 2,
				"22": 24,
				"23": 4,
				"24": 4,
				"25": 2,
				"26": 2,
				"27": 24,
				"28": 4,
				"29": 4,
				"30": 2,
				"31": 3,
				"32": 24,
				"33": 0,
				"34": 0,
				"35": 0,
				"36": 0,
				"37": 24,
				"38": 2,
				"39": 2,
				"40": 1,
				"41": 2,
				"42": 24,
				"43": 2,
				"44": 2,
				"45": 1,
				"46": 2,
				"47": 24,
				"48": 2,
				"49": 2,
				"50": 1,
				"51": 2,
				"52": 24,
				"53": 0,
				"54": 0,
				"55": 0,
				"56": 0,
				"57": 0,
				"58": 0,
				"59": 0,
				"60": 0,
				"61": 0,
				"62": 24,
				"63": 0,
				"64": 0,
				"65": 0,
				"66": 0,
				"67": 24,
				"68": 0,
				"69": 0,
				"70": 0,
				"71": 0,
				"72": 24,
				"73": 0,
				"74": 0,
				"75": 0,
				"76": 0,
				"77": 24,
				"78": 0,
				"79": 0,
				"80": 0,
				"81": 0,
				"82": 24,
				"83": 0,
				"84": 0,
				"85": 0,
				"86": 0,
				"87": 24,
				"88": 0,
				"89": 0,
				"90": 0,
				"91": 0,
				"92": 24,
				"93": 2,
				"94": 2,
				"95": 2,
				"96": 2,
				"97": 1,
				"98": 1,
				"99": 24,
				"100": 2,
				"101": 2,
				"102": 2,
				"103": 2,
				"104": 1,
				"105": 1,
				"106": 24,
				"107": 2,
				"108": 2,
				"109": 1,
				"110": 1,
				"111": 24,
				"112": 4,
				"113": 4,
				"114": 2,
				"115": 2,
				"116": 24,
				"117": 0,
				"118": 0,
				"119": 0,
				"120": 0,
				"121": 24,
				"122": 4,
				"123": 4,
				"124": 2,
				"125": 2,
				"126": 2,
				"127": 2,
				"128": 2,
				"129": 24,
				"130": 0,
				"131": 0,
				"132": 0,
				"133": 0,
				"134": 24,
				"135": 0,
				"136": 0,
				"137": 0,
				"138": 0,
				"139": 24,
				"140": 4,
				"141": 4,
				"142": 2,
				"143": 2,
				"144": 24,
				"145": 4,
				"146": 4,
				"147": 2,
				"148": 2,
				"149": 24,
				"150": 3,
				"151": 3,
				"152": 3,
				"153": 1,
				"154": 2,
				"155": 1,
				"156": 1
			},
			"f": {
				"0": 24,
				"1": 4,
				"2": 4,
				"3": 4,
				"4": 4,
				"5": 4,
				"6": 0,
				"7": 2,
				"8": 2,
				"9": 2,
				"10": 0,
				"11": 0,
				"12": 0,
				"13": 0,
				"14": 0,
				"15": 0,
				"16": 0,
				"17": 2,
				"18": 2,
				"19": 2,
				"20": 4,
				"21": 0,
				"22": 4,
				"23": 0,
				"24": 0,
				"25": 4,
				"26": 4,
				"27": 3
			},
			"b": {
				"0": [0],
				"1": [2, 0],
				"2": [2, 0],
				"3": [0],
				"4": [2, 0],
				"5": [0],
				"6": [2, 0],
				"7": [0],
				"8": [3, 0],
				"9": [0],
				"10": [0, 0],
				"11": [0],
				"12": [2, 0],
				"13": [0],
				"14": [2, 0],
				"15": [0],
				"16": [2, 0],
				"17": [0],
				"18": [0],
				"19": [0],
				"20": [0, 0],
				"21": [0],
				"22": [0, 0],
				"23": [0],
				"24": [0, 0],
				"25": [0],
				"26": [0, 0],
				"27": [0],
				"28": [0, 0],
				"29": [0],
				"30": [0, 0],
				"31": [0],
				"32": [0, 0],
				"33": [2],
				"34": [0],
				"35": [2, 0],
				"36": [1, 0],
				"37": [0],
				"38": [2, 0],
				"39": [1, 0],
				"40": [0],
				"41": [1, 0],
				"42": [1, 0],
				"43": [0],
				"44": [2, 0],
				"45": [0],
				"46": [0, 0],
				"47": [0],
				"48": [2, 2],
				"49": [2, 0],
				"50": [0],
				"51": [0, 0],
				"52": [0, 0],
				"53": [0],
				"54": [0, 0],
				"55": [0],
				"56": [2, 0],
				"57": [0],
				"58": [2, 0],
				"59": [1],
				"60": [1, 0]
			}
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/index.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/index.ts",
			"statementMap": {
				"0": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 29 } },
				"1": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 29 } },
				"2": { "start": { "line": 4, "column": 0 }, "end": { "line": 4, "column": 30 } },
				"3": { "start": { "line": 5, "column": 0 }, "end": { "line": 5, "column": 28 } },
				"4": { "start": { "line": 6, "column": 0 }, "end": { "line": 6, "column": 34 } },
				"5": { "start": { "line": 7, "column": 0 }, "end": { "line": 7, "column": 31 } },
				"6": { "start": { "line": 8, "column": 0 }, "end": { "line": 8, "column": 28 } },
				"7": { "start": { "line": 9, "column": 0 }, "end": { "line": 9, "column": 9 } },
				"8": { "start": { "line": 9, "column": 9 }, "end": { "line": 9, "column": 25 } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_4)",
					"decl": { "start": { "line": 9, "column": 9 }, "end": { "line": 9, "column": 14 } },
					"loc": { "start": { "line": 9, "column": 9 }, "end": { "line": 9, "column": 25 } }
				}
			},
			"branchMap": {},
			"s": { "0": 3, "1": 3, "2": 3, "3": 3, "4": 3, "5": 3, "6": 3, "7": 3, "8": 46 },
			"f": { "0": 43 },
			"b": {}
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/clients.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/clients.ts",
			"statementMap": {
				"0": { "start": { "line": 11, "column": 0 }, "end": { "line": 11, "column": 16 } },
				"1": { "start": { "line": 42, "column": 0 }, "end": { "line": 42, "column": 16 } },
				"2": { "start": { "line": 59, "column": 0 }, "end": { "line": 59, "column": 16 } },
				"3": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 130 } },
				"4": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 52 } },
				"5": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 68 } },
				"6": { "start": { "line": 6, "column": 20 }, "end": { "line": 6, "column": 51 } },
				"7": { "start": { "line": 12, "column": 18 }, "end": { "line": 12, "column": 33 } },
				"8": { "start": { "line": 15, "column": 1 }, "end": { "line": 22, "column": 2 } },
				"9": { "start": { "line": 16, "column": 23 }, "end": { "line": 16, "column": 48 } },
				"10": { "start": { "line": 18, "column": 2 }, "end": { "line": 20, "column": 3 } },
				"11": { "start": { "line": 19, "column": 3 }, "end": { "line": 19, "column": 72 } },
				"12": { "start": { "line": 21, "column": 2 }, "end": { "line": 21, "column": 22 } },
				"13": { "start": { "line": 25, "column": 15 }, "end": { "line": 25, "column": 32 } },
				"14": { "start": { "line": 26, "column": 16 }, "end": { "line": 26, "column": 34 } },
				"15": { "start": { "line": 28, "column": 16 }, "end": { "line": 31, "column": 3 } },
				"16": { "start": { "line": 34, "column": 1 }, "end": { "line": 34, "column": 35 } },
				"17": { "start": { "line": 36, "column": 1 }, "end": { "line": 36, "column": 15 } },
				"18": { "start": { "line": 43, "column": 15 }, "end": { "line": 43, "column": 32 } },
				"19": { "start": { "line": 44, "column": 16 }, "end": { "line": 44, "column": 34 } },
				"20": { "start": { "line": 45, "column": 17 }, "end": { "line": 45, "column": 48 } },
				"21": { "start": { "line": 47, "column": 1 }, "end": { "line": 51, "column": 4 } },
				"22": { "start": { "line": 60, "column": 17 }, "end": { "line": 60, "column": 48 } },
				"23": { "start": { "line": 61, "column": 1 }, "end": { "line": 61, "column": 24 } }
			},
			"fnMap": {
				"0": {
					"name": "getPublicClient",
					"decl": { "start": { "line": 11, "column": 16 }, "end": { "line": 11, "column": 31 } },
					"loc": { "start": { "line": 11, "column": 57 }, "end": { "line": 37, "column": 1 } }
				},
				"1": {
					"name": "getWalletClient",
					"decl": { "start": { "line": 42, "column": 16 }, "end": { "line": 42, "column": 31 } },
					"loc": { "start": { "line": 42, "column": 74 }, "end": { "line": 52, "column": 1 } }
				},
				"2": {
					"name": "getAddressFromPrivateKey",
					"decl": { "start": { "line": 59, "column": 16 }, "end": { "line": 59, "column": 40 } },
					"loc": { "start": { "line": 59, "column": 56 }, "end": { "line": 62, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 11, "column": 32 }, "end": { "line": 11, "column": 57 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 11, "column": 42 }, "end": { "line": 11, "column": 57 } }]
				},
				"1": {
					"loc": { "start": { "line": 15, "column": 1 }, "end": { "line": 22, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 15, "column": 1 }, "end": { "line": 22, "column": 2 } }]
				},
				"2": {
					"loc": { "start": { "line": 18, "column": 2 }, "end": { "line": 20, "column": 3 } },
					"type": "if",
					"locations": [{ "start": { "line": 18, "column": 2 }, "end": { "line": 20, "column": 3 } }]
				},
				"3": {
					"loc": { "start": { "line": 42, "column": 49 }, "end": { "line": 42, "column": 74 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 42, "column": 59 }, "end": { "line": 42, "column": 74 } }]
				}
			},
			"s": {
				"0": 7,
				"1": 7,
				"2": 7,
				"3": 7,
				"4": 7,
				"5": 7,
				"6": 7,
				"7": 8,
				"8": 8,
				"9": 6,
				"10": 6,
				"11": 1,
				"12": 5,
				"13": 2,
				"14": 2,
				"15": 2,
				"16": 2,
				"17": 2,
				"18": 2,
				"19": 2,
				"20": 2,
				"21": 2,
				"22": 1,
				"23": 1
			},
			"f": { "0": 8, "1": 2, "2": 1 },
			"b": { "0": [1], "1": [6], "2": [1], "3": [1] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/balance.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/balance.ts",
			"statementMap": {
				"0": { "start": { "line": 70, "column": 0 }, "end": { "line": 70, "column": 7 } },
				"1": { "start": { "line": 89, "column": 0 }, "end": { "line": 89, "column": 7 } },
				"2": { "start": { "line": 132, "column": 0 }, "end": { "line": 132, "column": 7 } },
				"3": { "start": { "line": 161, "column": 0 }, "end": { "line": 161, "column": 7 } },
				"4": { "start": { "line": 184, "column": 0 }, "end": { "line": 184, "column": 7 } },
				"5": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 75 } },
				"6": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 47 } },
				"7": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 46 } },
				"8": { "start": { "line": 4, "column": 0 }, "end": { "line": 4, "column": 39 } },
				"9": { "start": { "line": 5, "column": 0 }, "end": { "line": 5, "column": 47 } },
				"10": { "start": { "line": 8, "column": 17 }, "end": { "line": 30, "column": 11 } },
				"11": { "start": { "line": 33, "column": 18 }, "end": { "line": 48, "column": 11 } },
				"12": { "start": { "line": 51, "column": 19 }, "end": { "line": 62, "column": 11 } },
				"13": { "start": { "line": 71, "column": 26 }, "end": { "line": 71, "column": 67 } },
				"14": { "start": { "line": 73, "column": 16 }, "end": { "line": 73, "column": 40 } },
				"15": { "start": { "line": 74, "column": 17 }, "end": { "line": 74, "column": 71 } },
				"16": { "start": { "line": 76, "column": 1 }, "end": { "line": 79, "column": 3 } },
				"17": { "start": { "line": 101, "column": 31 }, "end": { "line": 101, "column": 77 } },
				"18": { "start": { "line": 102, "column": 31 }, "end": { "line": 102, "column": 77 } },
				"19": { "start": { "line": 104, "column": 22 }, "end": { "line": 104, "column": 46 } },
				"20": { "start": { "line": 106, "column": 18 }, "end": { "line": 110, "column": 3 } },
				"21": { "start": { "line": 112, "column": 37 }, "end": { "line": 112, "column": 156 } },
				"22": { "start": { "line": 114, "column": 1 }, "end": { "line": 121, "column": 3 } },
				"23": { "start": { "line": 133, "column": 31 }, "end": { "line": 133, "column": 77 } },
				"24": { "start": { "line": 134, "column": 31 }, "end": { "line": 134, "column": 77 } },
				"25": { "start": { "line": 136, "column": 1 }, "end": { "line": 151, "column": 2 } },
				"26": { "start": { "line": 137, "column": 23 }, "end": { "line": 144, "column": null } },
				"27": { "start": { "line": 147, "column": 2 }, "end": { "line": 147, "column": 75 } },
				"28": { "start": { "line": 149, "column": 2 }, "end": { "line": 149, "column": 66 } },
				"29": { "start": { "line": 150, "column": 2 }, "end": { "line": 150, "column": 15 } },
				"30": { "start": { "line": 162, "column": 31 }, "end": { "line": 162, "column": 77 } },
				"31": { "start": { "line": 163, "column": 31 }, "end": { "line": 163, "column": 77 } },
				"32": { "start": { "line": 165, "column": 1 }, "end": { "line": 173, "column": 23 } },
				"33": { "start": { "line": 185, "column": 31 }, "end": { "line": 185, "column": 77 } },
				"34": { "start": { "line": 186, "column": 31 }, "end": { "line": 186, "column": 77 } },
				"35": { "start": { "line": 188, "column": 1 }, "end": { "line": 196, "column": 23 } }
			},
			"fnMap": {
				"0": {
					"name": "getBalance",
					"decl": { "start": { "line": 70, "column": 22 }, "end": { "line": 70, "column": 32 } },
					"loc": { "start": { "line": 70, "column": 75 }, "end": { "line": 80, "column": 1 } }
				},
				"1": {
					"name": "getERC20Balance",
					"decl": { "start": { "line": 89, "column": 22 }, "end": { "line": 89, "column": 37 } },
					"loc": { "start": { "line": 92, "column": 26 }, "end": { "line": 122, "column": 1 } }
				},
				"2": {
					"name": "isNFTOwner",
					"decl": { "start": { "line": 132, "column": 22 }, "end": { "line": 132, "column": 32 } },
					"loc": { "start": { "line": 132, "column": 119 }, "end": { "line": 152, "column": 1 } }
				},
				"3": {
					"name": "getERC721Balance",
					"decl": { "start": { "line": 161, "column": 22 }, "end": { "line": 161, "column": 38 } },
					"loc": { "start": { "line": 161, "column": 108 }, "end": { "line": 174, "column": 1 } }
				},
				"4": {
					"name": "getERC1155Balance",
					"decl": { "start": { "line": 184, "column": 22 }, "end": { "line": 184, "column": 39 } },
					"loc": { "start": { "line": 184, "column": 126 }, "end": { "line": 197, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 70, "column": 50 }, "end": { "line": 70, "column": 75 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 70, "column": 60 }, "end": { "line": 70, "column": 75 } }]
				},
				"1": {
					"loc": { "start": { "line": 92, "column": 1 }, "end": { "line": 92, "column": 26 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 92, "column": 11 }, "end": { "line": 92, "column": 26 } }]
				},
				"2": {
					"loc": { "start": { "line": 132, "column": 94 }, "end": { "line": 132, "column": 119 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 132, "column": 104 }, "end": { "line": 132, "column": 119 } }]
				},
				"3": {
					"loc": { "start": { "line": 161, "column": 83 }, "end": { "line": 161, "column": 108 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 161, "column": 93 }, "end": { "line": 161, "column": 108 } }]
				},
				"4": {
					"loc": { "start": { "line": 184, "column": 101 }, "end": { "line": 184, "column": 126 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 184, "column": 111 }, "end": { "line": 184, "column": 126 } }]
				}
			},
			"s": {
				"0": 3,
				"1": 3,
				"2": 3,
				"3": 3,
				"4": 3,
				"5": 3,
				"6": 3,
				"7": 3,
				"8": 3,
				"9": 3,
				"10": 3,
				"11": 3,
				"12": 3,
				"13": 1,
				"14": 1,
				"15": 1,
				"16": 1,
				"17": 1,
				"18": 1,
				"19": 1,
				"20": 1,
				"21": 1,
				"22": 1,
				"23": 3,
				"24": 3,
				"25": 3,
				"26": 3,
				"27": 2,
				"28": 1,
				"29": 1,
				"30": 1,
				"31": 1,
				"32": 1,
				"33": 1,
				"34": 1,
				"35": 1
			},
			"f": { "0": 1, "1": 1, "2": 3, "3": 1, "4": 1 },
			"b": { "0": [1], "1": [1], "2": [3], "3": [1], "4": [1] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/contracts.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/contracts.ts",
			"statementMap": {
				"0": { "start": { "line": 10, "column": 0 }, "end": { "line": 10, "column": 7 } },
				"1": { "start": { "line": 22, "column": 0 }, "end": { "line": 22, "column": 7 } },
				"2": { "start": { "line": 37, "column": 0 }, "end": { "line": 37, "column": 7 } },
				"3": { "start": { "line": 48, "column": 0 }, "end": { "line": 48, "column": 7 } },
				"4": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 47 } },
				"5": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 50 } },
				"6": { "start": { "line": 4, "column": 0 }, "end": { "line": 4, "column": 64 } },
				"7": { "start": { "line": 5, "column": 0 }, "end": { "line": 5, "column": 39 } },
				"8": { "start": { "line": 11, "column": 16 }, "end": { "line": 11, "column": 40 } },
				"9": { "start": { "line": 12, "column": 1 }, "end": { "line": 12, "column": 42 } },
				"10": { "start": { "line": 24, "column": 13 }, "end": { "line": 24, "column": 33 } },
				"11": { "start": { "line": 26, "column": 1 }, "end": { "line": 28, "column": 2 } },
				"12": { "start": { "line": 27, "column": 2 }, "end": { "line": 27, "column": 117 } },
				"13": { "start": { "line": 30, "column": 16 }, "end": { "line": 30, "column": 45 } },
				"14": { "start": { "line": 31, "column": 1 }, "end": { "line": 31, "column": 43 } },
				"15": { "start": { "line": 38, "column": 16 }, "end": { "line": 38, "column": 40 } },
				"16": { "start": { "line": 39, "column": 1 }, "end": { "line": 39, "column": 37 } },
				"17": { "start": { "line": 49, "column": 26 }, "end": { "line": 49, "column": 67 } },
				"18": { "start": { "line": 51, "column": 16 }, "end": { "line": 51, "column": 40 } },
				"19": { "start": { "line": 52, "column": 14 }, "end": { "line": 52, "column": 69 } },
				"20": { "start": { "line": 53, "column": 1 }, "end": { "line": 53, "column": 44 } }
			},
			"fnMap": {
				"0": {
					"name": "readContract",
					"decl": { "start": { "line": 10, "column": 22 }, "end": { "line": 10, "column": 34 } },
					"loc": { "start": { "line": 10, "column": 92 }, "end": { "line": 13, "column": 1 } }
				},
				"1": {
					"name": "writeContract",
					"decl": { "start": { "line": 22, "column": 22 }, "end": { "line": 22, "column": 35 } },
					"loc": { "start": { "line": 22, "column": 94 }, "end": { "line": 32, "column": 1 } }
				},
				"2": {
					"name": "getLogs",
					"decl": { "start": { "line": 37, "column": 22 }, "end": { "line": 37, "column": 29 } },
					"loc": { "start": { "line": 37, "column": 82 }, "end": { "line": 40, "column": 1 } }
				},
				"3": {
					"name": "isContract",
					"decl": { "start": { "line": 48, "column": 22 }, "end": { "line": 48, "column": 32 } },
					"loc": { "start": { "line": 48, "column": 75 }, "end": { "line": 54, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 10, "column": 67 }, "end": { "line": 10, "column": 92 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 10, "column": 77 }, "end": { "line": 10, "column": 92 } }]
				},
				"1": {
					"loc": { "start": { "line": 22, "column": 69 }, "end": { "line": 22, "column": 94 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 22, "column": 79 }, "end": { "line": 22, "column": 94 } }]
				},
				"2": {
					"loc": { "start": { "line": 26, "column": 1 }, "end": { "line": 28, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 26, "column": 1 }, "end": { "line": 28, "column": 2 } }]
				},
				"3": {
					"loc": { "start": { "line": 37, "column": 57 }, "end": { "line": 37, "column": 82 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 37, "column": 67 }, "end": { "line": 37, "column": 82 } }]
				},
				"4": {
					"loc": { "start": { "line": 48, "column": 50 }, "end": { "line": 48, "column": 75 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 48, "column": 60 }, "end": { "line": 48, "column": 75 } }]
				},
				"5": {
					"loc": { "start": { "line": 53, "column": 8 }, "end": { "line": 53, "column": 43 } },
					"type": "binary-expr",
					"locations": [
						{ "start": { "line": 53, "column": 8 }, "end": { "line": 53, "column": 26 } },
						{ "start": { "line": 53, "column": 30 }, "end": { "line": 53, "column": 43 } }
					]
				}
			},
			"s": {
				"0": 3,
				"1": 3,
				"2": 3,
				"3": 3,
				"4": 3,
				"5": 3,
				"6": 3,
				"7": 3,
				"8": 2,
				"9": 2,
				"10": 3,
				"11": 3,
				"12": 1,
				"13": 2,
				"14": 2,
				"15": 2,
				"16": 2,
				"17": 4,
				"18": 4,
				"19": 4,
				"20": 4
			},
			"f": { "0": 2, "1": 3, "2": 2, "3": 4 },
			"b": { "0": [1], "1": [1], "2": [1], "3": [1], "4": [1], "5": [4, 3] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/transfer.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/transfer.ts",
			"statementMap": {
				"0": { "start": { "line": 116, "column": 0 }, "end": { "line": 116, "column": 7 } },
				"1": { "start": { "line": 154, "column": 0 }, "end": { "line": 154, "column": 7 } },
				"2": { "start": { "line": 235, "column": 0 }, "end": { "line": 235, "column": 7 } },
				"3": { "start": { "line": 315, "column": 0 }, "end": { "line": 315, "column": 7 } },
				"4": { "start": { "line": 395, "column": 0 }, "end": { "line": 395, "column": 7 } },
				"5": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 94 } },
				"6": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 47 } },
				"7": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 50 } },
				"8": { "start": { "line": 4, "column": 0 }, "end": { "line": 4, "column": 64 } },
				"9": { "start": { "line": 5, "column": 0 }, "end": { "line": 5, "column": 39 } },
				"10": { "start": { "line": 8, "column": 25 }, "end": { "line": 43, "column": 11 } },
				"11": { "start": { "line": 46, "column": 26 }, "end": { "line": 79, "column": 11 } },
				"12": { "start": { "line": 82, "column": 27 }, "end": { "line": 106, "column": 11 } },
				"13": { "start": { "line": 121, "column": 28 }, "end": { "line": 121, "column": 71 } },
				"14": { "start": { "line": 123, "column": 20 }, "end": { "line": 123, "column": 40 } },
				"15": { "start": { "line": 125, "column": 1 }, "end": { "line": 127, "column": 2 } },
				"16": { "start": { "line": 126, "column": 2 }, "end": { "line": 126, "column": 117 } },
				"17": { "start": { "line": 129, "column": 16 }, "end": { "line": 129, "column": 52 } },
				"18": { "start": { "line": 130, "column": 19 }, "end": { "line": 130, "column": 37 } },
				"19": { "start": { "line": 133, "column": 1 }, "end": { "line": 135, "column": 2 } },
				"20": { "start": { "line": 134, "column": 2 }, "end": { "line": 134, "column": 61 } },
				"21": { "start": { "line": 137, "column": 1 }, "end": { "line": 142, "column": 4 } },
				"22": { "start": { "line": 170, "column": 31 }, "end": { "line": 170, "column": 77 } },
				"23": { "start": { "line": 171, "column": 28 }, "end": { "line": 171, "column": 71 } },
				"24": { "start": { "line": 173, "column": 20 }, "end": { "line": 173, "column": 40 } },
				"25": { "start": { "line": 175, "column": 1 }, "end": { "line": 177, "column": 2 } },
				"26": { "start": { "line": 176, "column": 2 }, "end": { "line": 176, "column": 117 } },
				"27": { "start": { "line": 179, "column": 22 }, "end": { "line": 179, "column": 46 } },
				"28": { "start": { "line": 182, "column": 18 }, "end": { "line": 186, "column": 3 } },
				"29": { "start": { "line": 189, "column": 18 }, "end": { "line": 189, "column": 48 } },
				"30": { "start": { "line": 190, "column": 16 }, "end": { "line": 190, "column": 44 } },
				"31": { "start": { "line": 193, "column": 19 }, "end": { "line": 193, "column": 47 } },
				"32": { "start": { "line": 196, "column": 22 }, "end": { "line": 196, "column": 58 } },
				"33": { "start": { "line": 199, "column": 1 }, "end": { "line": 201, "column": 2 } },
				"34": { "start": { "line": 200, "column": 2 }, "end": { "line": 200, "column": 61 } },
				"35": { "start": { "line": 204, "column": 14 }, "end": { "line": 211, "column": 3 } },
				"36": { "start": { "line": 213, "column": 1 }, "end": { "line": 223, "column": 3 } },
				"37": { "start": { "line": 251, "column": 31 }, "end": { "line": 251, "column": 77 } },
				"38": { "start": { "line": 252, "column": 33 }, "end": { "line": 252, "column": 81 } },
				"39": { "start": { "line": 255, "column": 20 }, "end": { "line": 255, "column": 40 } },
				"40": { "start": { "line": 257, "column": 1 }, "end": { "line": 259, "column": 2 } },
				"41": { "start": { "line": 258, "column": 2 }, "end": { "line": 258, "column": 117 } },
				"42": { "start": { "line": 261, "column": 22 }, "end": { "line": 261, "column": 46 } },
				"43": { "start": { "line": 262, "column": 18 }, "end": { "line": 266, "column": 3 } },
				"44": { "start": { "line": 269, "column": 18 }, "end": { "line": 269, "column": 48 } },
				"45": { "start": { "line": 270, "column": 16 }, "end": { "line": 270, "column": 44 } },
				"46": { "start": { "line": 273, "column": 19 }, "end": { "line": 273, "column": 47 } },
				"47": { "start": { "line": 276, "column": 22 }, "end": { "line": 276, "column": 58 } },
				"48": { "start": { "line": 279, "column": 1 }, "end": { "line": 281, "column": 2 } },
				"49": { "start": { "line": 280, "column": 2 }, "end": { "line": 280, "column": 61 } },
				"50": { "start": { "line": 284, "column": 14 }, "end": { "line": 291, "column": 3 } },
				"51": { "start": { "line": 293, "column": 1 }, "end": { "line": 303, "column": 3 } },
				"52": { "start": { "line": 328, "column": 31 }, "end": { "line": 328, "column": 77 } },
				"53": { "start": { "line": 329, "column": 28 }, "end": { "line": 329, "column": 71 } },
				"54": { "start": { "line": 331, "column": 20 }, "end": { "line": 331, "column": 40 } },
				"55": { "start": { "line": 333, "column": 1 }, "end": { "line": 335, "column": 2 } },
				"56": { "start": { "line": 334, "column": 2 }, "end": { "line": 334, "column": 117 } },
				"57": { "start": { "line": 338, "column": 22 }, "end": { "line": 338, "column": 58 } },
				"58": { "start": { "line": 341, "column": 1 }, "end": { "line": 343, "column": 2 } },
				"59": { "start": { "line": 342, "column": 2 }, "end": { "line": 342, "column": 61 } },
				"60": { "start": { "line": 345, "column": 21 }, "end": { "line": 345, "column": 49 } },
				"61": { "start": { "line": 348, "column": 14 }, "end": { "line": 355, "column": 3 } },
				"62": { "start": { "line": 358, "column": 22 }, "end": { "line": 358, "column": 46 } },
				"63": { "start": { "line": 359, "column": 18 }, "end": { "line": 363, "column": 3 } },
				"64": { "start": { "line": 366, "column": 12 }, "end": { "line": 366, "column": 21 } },
				"65": { "start": { "line": 367, "column": 14 }, "end": { "line": 367, "column": 19 } },
				"66": { "start": { "line": 369, "column": 1 }, "end": { "line": 373, "column": 2 } },
				"67": { "start": { "line": 370, "column": 2 }, "end": { "line": 370, "column": 85 } },
				"68": { "start": { "line": 372, "column": 2 }, "end": { "line": 372, "column": 55 } },
				"69": { "start": { "line": 375, "column": 1 }, "end": { "line": 382, "column": 3 } },
				"70": { "start": { "line": 406, "column": 31 }, "end": { "line": 406, "column": 77 } },
				"71": { "start": { "line": 407, "column": 28 }, "end": { "line": 407, "column": 71 } },
				"72": { "start": { "line": 409, "column": 20 }, "end": { "line": 409, "column": 40 } },
				"73": { "start": { "line": 411, "column": 1 }, "end": { "line": 413, "column": 2 } },
				"74": { "start": { "line": 412, "column": 2 }, "end": { "line": 412, "column": 117 } },
				"75": { "start": { "line": 416, "column": 22 }, "end": { "line": 416, "column": 58 } },
				"76": { "start": { "line": 419, "column": 1 }, "end": { "line": 421, "column": 2 } },
				"77": { "start": { "line": 420, "column": 2 }, "end": { "line": 420, "column": 61 } },
				"78": { "start": { "line": 423, "column": 21 }, "end": { "line": 423, "column": 49 } },
				"79": { "start": { "line": 426, "column": 22 }, "end": { "line": 426, "column": 36 } },
				"80": { "start": { "line": 429, "column": 14 }, "end": { "line": 436, "column": 3 } },
				"81": { "start": { "line": 438, "column": 1 }, "end": { "line": 442, "column": 3 } }
			},
			"fnMap": {
				"0": {
					"name": "transferSei",
					"decl": { "start": { "line": 116, "column": 22 }, "end": { "line": 116, "column": 33 } },
					"loc": { "start": { "line": 119, "column": 26 }, "end": { "line": 143, "column": 1 } }
				},
				"1": {
					"name": "transferERC20",
					"decl": { "start": { "line": 154, "column": 22 }, "end": { "line": 154, "column": 35 } },
					"loc": { "start": { "line": 158, "column": 16 }, "end": { "line": 224, "column": 1 } }
				},
				"2": {
					"name": "approveERC20",
					"decl": { "start": { "line": 235, "column": 22 }, "end": { "line": 235, "column": 34 } },
					"loc": { "start": { "line": 239, "column": 16 }, "end": { "line": 304, "column": 1 } }
				},
				"3": {
					"name": "transferERC721",
					"decl": { "start": { "line": 315, "column": 22 }, "end": { "line": 315, "column": 36 } },
					"loc": { "start": { "line": 319, "column": 16 }, "end": { "line": 383, "column": 1 } }
				},
				"4": {
					"name": "transferERC1155",
					"decl": { "start": { "line": 395, "column": 22 }, "end": { "line": 395, "column": 37 } },
					"loc": { "start": { "line": 400, "column": 16 }, "end": { "line": 443, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 119, "column": 1 }, "end": { "line": 119, "column": 26 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 119, "column": 11 }, "end": { "line": 119, "column": 26 } }]
				},
				"1": {
					"loc": { "start": { "line": 125, "column": 1 }, "end": { "line": 127, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 125, "column": 1 }, "end": { "line": 127, "column": 2 } }]
				},
				"2": {
					"loc": { "start": { "line": 133, "column": 1 }, "end": { "line": 135, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 133, "column": 1 }, "end": { "line": 135, "column": 2 } }]
				},
				"3": {
					"loc": { "start": { "line": 158, "column": 1 }, "end": { "line": 158, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 158, "column": 11 }, "end": { "line": 158, "column": 16 } }]
				},
				"4": {
					"loc": { "start": { "line": 175, "column": 1 }, "end": { "line": 177, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 175, "column": 1 }, "end": { "line": 177, "column": 2 } }]
				},
				"5": {
					"loc": { "start": { "line": 199, "column": 1 }, "end": { "line": 201, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 199, "column": 1 }, "end": { "line": 201, "column": 2 } }]
				},
				"6": {
					"loc": { "start": { "line": 239, "column": 1 }, "end": { "line": 239, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 239, "column": 11 }, "end": { "line": 239, "column": 16 } }]
				},
				"7": {
					"loc": { "start": { "line": 257, "column": 1 }, "end": { "line": 259, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 257, "column": 1 }, "end": { "line": 259, "column": 2 } }]
				},
				"8": {
					"loc": { "start": { "line": 279, "column": 1 }, "end": { "line": 281, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 279, "column": 1 }, "end": { "line": 281, "column": 2 } }]
				},
				"9": {
					"loc": { "start": { "line": 319, "column": 1 }, "end": { "line": 319, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 319, "column": 11 }, "end": { "line": 319, "column": 16 } }]
				},
				"10": {
					"loc": { "start": { "line": 333, "column": 1 }, "end": { "line": 335, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 333, "column": 1 }, "end": { "line": 335, "column": 2 } }]
				},
				"11": {
					"loc": { "start": { "line": 341, "column": 1 }, "end": { "line": 343, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 341, "column": 1 }, "end": { "line": 343, "column": 2 } }]
				},
				"12": {
					"loc": { "start": { "line": 400, "column": 1 }, "end": { "line": 400, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 400, "column": 11 }, "end": { "line": 400, "column": 16 } }]
				},
				"13": {
					"loc": { "start": { "line": 411, "column": 1 }, "end": { "line": 413, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 411, "column": 1 }, "end": { "line": 413, "column": 2 } }]
				},
				"14": {
					"loc": { "start": { "line": 419, "column": 1 }, "end": { "line": 421, "column": 2 } },
					"type": "if",
					"locations": [{ "start": { "line": 419, "column": 1 }, "end": { "line": 421, "column": 2 } }]
				}
			},
			"s": {
				"0": 3,
				"1": 3,
				"2": 3,
				"3": 3,
				"4": 3,
				"5": 3,
				"6": 3,
				"7": 3,
				"8": 3,
				"9": 3,
				"10": 3,
				"11": 3,
				"12": 3,
				"13": 3,
				"14": 3,
				"15": 3,
				"16": 1,
				"17": 2,
				"18": 2,
				"19": 2,
				"20": 1,
				"21": 1,
				"22": 3,
				"23": 3,
				"24": 3,
				"25": 3,
				"26": 1,
				"27": 2,
				"28": 2,
				"29": 2,
				"30": 2,
				"31": 2,
				"32": 2,
				"33": 2,
				"34": 1,
				"35": 1,
				"36": 1,
				"37": 3,
				"38": 3,
				"39": 3,
				"40": 3,
				"41": 1,
				"42": 2,
				"43": 2,
				"44": 2,
				"45": 2,
				"46": 2,
				"47": 2,
				"48": 2,
				"49": 1,
				"50": 1,
				"51": 1,
				"52": 4,
				"53": 4,
				"54": 4,
				"55": 4,
				"56": 1,
				"57": 3,
				"58": 3,
				"59": 1,
				"60": 2,
				"61": 2,
				"62": 2,
				"63": 2,
				"64": 2,
				"65": 2,
				"66": 2,
				"67": 2,
				"68": 1,
				"69": 2,
				"70": 3,
				"71": 3,
				"72": 3,
				"73": 3,
				"74": 1,
				"75": 2,
				"76": 2,
				"77": 1,
				"78": 1,
				"79": 1,
				"80": 1,
				"81": 1
			},
			"f": { "0": 3, "1": 3, "2": 3, "3": 4, "4": 3 },
			"b": {
				"0": [2],
				"1": [1],
				"2": [1],
				"3": [3],
				"4": [1],
				"5": [1],
				"6": [3],
				"7": [1],
				"8": [1],
				"9": [4],
				"10": [1],
				"11": [1],
				"12": [3],
				"13": [1],
				"14": [1]
			}
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/blocks.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/blocks.ts",
			"statementMap": {
				"0": { "start": { "line": 8, "column": 0 }, "end": { "line": 8, "column": 7 } },
				"1": { "start": { "line": 16, "column": 0 }, "end": { "line": 16, "column": 7 } },
				"2": { "start": { "line": 24, "column": 0 }, "end": { "line": 24, "column": 7 } },
				"3": { "start": { "line": 32, "column": 0 }, "end": { "line": 32, "column": 7 } },
				"4": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 47 } },
				"5": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 47 } },
				"6": { "start": { "line": 9, "column": 16 }, "end": { "line": 9, "column": 40 } },
				"7": { "start": { "line": 10, "column": 1 }, "end": { "line": 10, "column": 38 } },
				"8": { "start": { "line": 17, "column": 16 }, "end": { "line": 17, "column": 40 } },
				"9": { "start": { "line": 18, "column": 1 }, "end": { "line": 18, "column": 68 } },
				"10": { "start": { "line": 25, "column": 16 }, "end": { "line": 25, "column": 40 } },
				"11": { "start": { "line": 26, "column": 1 }, "end": { "line": 26, "column": 45 } },
				"12": { "start": { "line": 33, "column": 16 }, "end": { "line": 33, "column": 40 } },
				"13": { "start": { "line": 34, "column": 1 }, "end": { "line": 34, "column": 32 } }
			},
			"fnMap": {
				"0": {
					"name": "getBlockNumber",
					"decl": { "start": { "line": 8, "column": 22 }, "end": { "line": 8, "column": 36 } },
					"loc": { "start": { "line": 8, "column": 62 }, "end": { "line": 11, "column": 1 } }
				},
				"1": {
					"name": "getBlockByNumber",
					"decl": { "start": { "line": 16, "column": 22 }, "end": { "line": 16, "column": 38 } },
					"loc": { "start": { "line": 16, "column": 85 }, "end": { "line": 19, "column": 1 } }
				},
				"2": {
					"name": "getBlockByHash",
					"decl": { "start": { "line": 24, "column": 22 }, "end": { "line": 24, "column": 36 } },
					"loc": { "start": { "line": 24, "column": 79 }, "end": { "line": 27, "column": 1 } }
				},
				"3": {
					"name": "getLatestBlock",
					"decl": { "start": { "line": 32, "column": 22 }, "end": { "line": 32, "column": 36 } },
					"loc": { "start": { "line": 32, "column": 62 }, "end": { "line": 35, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 8, "column": 37 }, "end": { "line": 8, "column": 62 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 8, "column": 47 }, "end": { "line": 8, "column": 62 } }]
				},
				"1": {
					"loc": { "start": { "line": 16, "column": 60 }, "end": { "line": 16, "column": 85 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 16, "column": 70 }, "end": { "line": 16, "column": 85 } }]
				},
				"2": {
					"loc": { "start": { "line": 24, "column": 54 }, "end": { "line": 24, "column": 79 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 24, "column": 64 }, "end": { "line": 24, "column": 79 } }]
				},
				"3": {
					"loc": { "start": { "line": 32, "column": 37 }, "end": { "line": 32, "column": 62 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 32, "column": 47 }, "end": { "line": 32, "column": 62 } }]
				}
			},
			"s": { "0": 4, "1": 4, "2": 4, "3": 4, "4": 4, "5": 4, "6": 3, "7": 3, "8": 3, "9": 3, "10": 3, "11": 3, "12": 3, "13": 3 },
			"f": { "0": 3, "1": 3, "2": 3, "3": 3 },
			"b": { "0": [2], "1": [2], "2": [2], "3": [2] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/transactions.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/transactions.ts",
			"statementMap": {
				"0": { "start": { "line": 8, "column": 0 }, "end": { "line": 8, "column": 7 } },
				"1": { "start": { "line": 16, "column": 0 }, "end": { "line": 16, "column": 7 } },
				"2": { "start": { "line": 24, "column": 0 }, "end": { "line": 24, "column": 7 } },
				"3": { "start": { "line": 33, "column": 0 }, "end": { "line": 33, "column": 7 } },
				"4": { "start": { "line": 41, "column": 0 }, "end": { "line": 41, "column": 7 } },
				"5": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 47 } },
				"6": { "start": { "line": 3, "column": 0 }, "end": { "line": 3, "column": 47 } },
				"7": { "start": { "line": 9, "column": 16 }, "end": { "line": 9, "column": 40 } },
				"8": { "start": { "line": 10, "column": 1 }, "end": { "line": 10, "column": 46 } },
				"9": { "start": { "line": 17, "column": 16 }, "end": { "line": 17, "column": 40 } },
				"10": { "start": { "line": 18, "column": 1 }, "end": { "line": 18, "column": 53 } },
				"11": { "start": { "line": 25, "column": 16 }, "end": { "line": 25, "column": 40 } },
				"12": { "start": { "line": 26, "column": 15 }, "end": { "line": 26, "column": 60 } },
				"13": { "start": { "line": 27, "column": 1 }, "end": { "line": 27, "column": 22 } },
				"14": { "start": { "line": 34, "column": 16 }, "end": { "line": 34, "column": 40 } },
				"15": { "start": { "line": 35, "column": 1 }, "end": { "line": 35, "column": 41 } },
				"16": { "start": { "line": 42, "column": 16 }, "end": { "line": 42, "column": 40 } },
				"17": { "start": { "line": 43, "column": 17 }, "end": { "line": 43, "column": 42 } },
				"18": { "start": { "line": 44, "column": 1 }, "end": { "line": 44, "column": 24 } }
			},
			"fnMap": {
				"0": {
					"name": "getTransaction",
					"decl": { "start": { "line": 8, "column": 22 }, "end": { "line": 8, "column": 36 } },
					"loc": { "start": { "line": 8, "column": 74 }, "end": { "line": 11, "column": 1 } }
				},
				"1": {
					"name": "getTransactionReceipt",
					"decl": { "start": { "line": 16, "column": 22 }, "end": { "line": 16, "column": 43 } },
					"loc": { "start": { "line": 16, "column": 81 }, "end": { "line": 19, "column": 1 } }
				},
				"2": {
					"name": "getTransactionCount",
					"decl": { "start": { "line": 24, "column": 22 }, "end": { "line": 24, "column": 41 } },
					"loc": { "start": { "line": 24, "column": 85 }, "end": { "line": 28, "column": 1 } }
				},
				"3": {
					"name": "estimateGas",
					"decl": { "start": { "line": 33, "column": 22 }, "end": { "line": 33, "column": 33 } },
					"loc": { "start": { "line": 33, "column": 90 }, "end": { "line": 36, "column": 1 } }
				},
				"4": {
					"name": "getChainId",
					"decl": { "start": { "line": 41, "column": 22 }, "end": { "line": 41, "column": 32 } },
					"loc": { "start": { "line": 41, "column": 58 }, "end": { "line": 45, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 8, "column": 49 }, "end": { "line": 8, "column": 74 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 8, "column": 59 }, "end": { "line": 8, "column": 74 } }]
				},
				"1": {
					"loc": { "start": { "line": 16, "column": 56 }, "end": { "line": 16, "column": 81 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 16, "column": 66 }, "end": { "line": 16, "column": 81 } }]
				},
				"2": {
					"loc": { "start": { "line": 24, "column": 60 }, "end": { "line": 24, "column": 85 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 24, "column": 70 }, "end": { "line": 24, "column": 85 } }]
				},
				"3": {
					"loc": { "start": { "line": 33, "column": 65 }, "end": { "line": 33, "column": 90 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 33, "column": 75 }, "end": { "line": 33, "column": 90 } }]
				},
				"4": {
					"loc": { "start": { "line": 41, "column": 33 }, "end": { "line": 41, "column": 58 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 41, "column": 43 }, "end": { "line": 41, "column": 58 } }]
				}
			},
			"s": {
				"0": 4,
				"1": 4,
				"2": 4,
				"3": 4,
				"4": 4,
				"5": 4,
				"6": 4,
				"7": 3,
				"8": 3,
				"9": 3,
				"10": 3,
				"11": 3,
				"12": 3,
				"13": 2,
				"14": 3,
				"15": 3,
				"16": 3,
				"17": 3,
				"18": 2
			},
			"f": { "0": 3, "1": 3, "2": 3, "3": 3, "4": 3 },
			"b": { "0": [2], "1": [2], "2": [2], "3": [2], "4": [2] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/tokens.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/tokens.ts",
			"statementMap": {
				"0": { "start": { "line": 75, "column": 0 }, "end": { "line": 75, "column": 7 } },
				"1": { "start": { "line": 112, "column": 0 }, "end": { "line": 112, "column": 7 } },
				"2": { "start": { "line": 141, "column": 0 }, "end": { "line": 141, "column": 7 } },
				"3": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 83 } },
				"4": { "start": { "line": 2, "column": 0 }, "end": { "line": 2, "column": 47 } },
				"5": { "start": { "line": 5, "column": 17 }, "end": { "line": 34, "column": 11 } },
				"6": { "start": { "line": 37, "column": 18 }, "end": { "line": 59, "column": 11 } },
				"7": { "start": { "line": 62, "column": 19 }, "end": { "line": 70, "column": 11 } },
				"8": { "start": { "line": 85, "column": 22 }, "end": { "line": 85, "column": 46 } },
				"9": { "start": { "line": 87, "column": 18 }, "end": { "line": 91, "column": 3 } },
				"10": { "start": { "line": 93, "column": 47 }, "end": { "line": 98, "column": 3 } },
				"11": { "start": { "line": 100, "column": 1 }, "end": { "line": 106, "column": 3 } },
				"12": { "start": { "line": 121, "column": 22 }, "end": { "line": 121, "column": 46 } },
				"13": { "start": { "line": 123, "column": 18 }, "end": { "line": 127, "column": 3 } },
				"14": { "start": { "line": 129, "column": 34 }, "end": { "line": 129, "column": 134 } },
				"15": { "start": { "line": 131, "column": 1 }, "end": { "line": 135, "column": 3 } },
				"16": { "start": { "line": 142, "column": 22 }, "end": { "line": 142, "column": 46 } },
				"17": { "start": { "line": 144, "column": 18 }, "end": { "line": 148, "column": 3 } },
				"18": { "start": { "line": 150, "column": 1 }, "end": { "line": 150, "column": 37 } }
			},
			"fnMap": {
				"0": {
					"name": "getERC20TokenInfo",
					"decl": { "start": { "line": 75, "column": 22 }, "end": { "line": 75, "column": 39 } },
					"loc": { "start": { "line": 77, "column": 16 }, "end": { "line": 107, "column": 1 } }
				},
				"1": {
					"name": "getERC721TokenMetadata",
					"decl": { "start": { "line": 112, "column": 22 }, "end": { "line": 112, "column": 44 } },
					"loc": { "start": { "line": 115, "column": 16 }, "end": { "line": 136, "column": 1 } }
				},
				"2": {
					"name": "getERC1155TokenURI",
					"decl": { "start": { "line": 141, "column": 22 }, "end": { "line": 141, "column": 40 } },
					"loc": { "start": { "line": 141, "column": 96 }, "end": { "line": 151, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 77, "column": 1 }, "end": { "line": 77, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 77, "column": 11 }, "end": { "line": 77, "column": 16 } }]
				},
				"1": {
					"loc": { "start": { "line": 115, "column": 1 }, "end": { "line": 115, "column": 16 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 115, "column": 11 }, "end": { "line": 115, "column": 16 } }]
				},
				"2": {
					"loc": { "start": { "line": 141, "column": 81 }, "end": { "line": 141, "column": 96 } },
					"type": "default-arg",
					"locations": [{ "start": { "line": 141, "column": 91 }, "end": { "line": 141, "column": 96 } }]
				}
			},
			"s": {
				"0": 4,
				"1": 4,
				"2": 4,
				"3": 4,
				"4": 4,
				"5": 4,
				"6": 4,
				"7": 4,
				"8": 3,
				"9": 3,
				"10": 3,
				"11": 2,
				"12": 3,
				"13": 3,
				"14": 3,
				"15": 2,
				"16": 3,
				"17": 3,
				"18": 3
			},
			"f": { "0": 3, "1": 3, "2": 3 },
			"b": { "0": [2], "1": [2], "2": [2] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/utils.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/core/services/utils.ts",
			"statementMap": {
				"0": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 48 } },
				"1": { "start": { "line": 6, "column": 13 }, "end": { "line": 21, "column": 2 } },
				"2": { "start": { "line": 11, "column": 39 }, "end": { "line": 11, "column": 131 } },
				"3": { "start": { "line": 11, "column": 74 }, "end": { "line": 11, "column": 126 } },
				"4": { "start": { "line": 15, "column": 2 }, "end": { "line": 17, "column": 3 } },
				"5": { "start": { "line": 16, "column": 3 }, "end": { "line": 16, "column": 29 } },
				"6": { "start": { "line": 19, "column": 2 }, "end": { "line": 19, "column": 49 } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_0)",
					"decl": { "start": { "line": 11, "column": 13 }, "end": { "line": 11, "column": 14 } },
					"loc": { "start": { "line": 11, "column": 39 }, "end": { "line": 11, "column": 131 } }
				},
				"1": {
					"name": "(anonymous_1)",
					"decl": { "start": { "line": 11, "column": 59 }, "end": { "line": 11, "column": 60 } },
					"loc": { "start": { "line": 11, "column": 74 }, "end": { "line": 11, "column": 126 } }
				},
				"2": {
					"name": "(anonymous_2)",
					"decl": { "start": { "line": 13, "column": 18 }, "end": { "line": 13, "column": 19 } },
					"loc": { "start": { "line": 13, "column": 47 }, "end": { "line": 20, "column": 2 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 11, "column": 74 }, "end": { "line": 11, "column": 126 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 11, "column": 102 }, "end": { "line": 11, "column": 118 } },
						{ "start": { "line": 11, "column": 121 }, "end": { "line": 11, "column": 126 } }
					]
				},
				"1": {
					"loc": { "start": { "line": 15, "column": 2 }, "end": { "line": 17, "column": 3 } },
					"type": "if",
					"locations": [{ "start": { "line": 15, "column": 2 }, "end": { "line": 17, "column": 3 } }]
				}
			},
			"s": { "0": 3, "1": 3, "2": 2, "3": 10, "4": 35, "5": 31, "6": 4 },
			"f": { "0": 2, "1": 10, "2": 35 },
			"b": { "0": [2, 8], "1": [31] }
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/helpers/tool-test-helpers.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/helpers/tool-test-helpers.ts",
			"statementMap": {
				"0": { "start": { "line": 70, "column": 0 }, "end": { "line": 70, "column": 16 } },
				"1": { "start": { "line": 88, "column": 0 }, "end": { "line": 88, "column": 7 } },
				"2": { "start": { "line": 100, "column": 0 }, "end": { "line": 100, "column": 7 } },
				"3": { "start": { "line": 117, "column": 0 }, "end": { "line": 117, "column": 16 } },
				"4": { "start": { "line": 132, "column": 0 }, "end": { "line": 132, "column": 16 } },
				"5": { "start": { "line": 143, "column": 0 }, "end": { "line": 143, "column": 16 } },
				"6": { "start": { "line": 168, "column": 0 }, "end": { "line": 168, "column": 16 } },
				"7": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 37 } },
				"8": { "start": { "line": 71, "column": 26 }, "end": { "line": 71, "column": 49 } },
				"9": { "start": { "line": 73, "column": 17 }, "end": { "line": 77, "column": 28 } },
				"10": { "start": { "line": 75, "column": 6 }, "end": { "line": 75, "column": 72 } },
				"11": { "start": { "line": 79, "column": 2 }, "end": { "line": 79, "column": 37 } },
				"12": { "start": { "line": 89, "column": 2 }, "end": { "line": 89, "column": 52 } },
				"13": { "start": { "line": 106, "column": 2 }, "end": { "line": 108, "column": 5 } },
				"14": { "start": { "line": 107, "column": 4 }, "end": { "line": 107, "column": 16 } },
				"15": { "start": { "line": 109, "column": 2 }, "end": { "line": 109, "column": 52 } },
				"16": { "start": { "line": 118, "column": 2 }, "end": { "line": 118, "column": 45 } },
				"17": { "start": { "line": 119, "column": 2 }, "end": { "line": 119, "column": 49 } },
				"18": { "start": { "line": 120, "column": 2 }, "end": { "line": 120, "column": 61 } },
				"19": { "start": { "line": 123, "column": 23 }, "end": { "line": 123, "column": 59 } },
				"20": { "start": { "line": 124, "column": 2 }, "end": { "line": 124, "column": 45 } },
				"21": { "start": { "line": 133, "column": 2 }, "end": { "line": 133, "column": 45 } },
				"22": { "start": { "line": 134, "column": 2 }, "end": { "line": 134, "column": 49 } },
				"23": { "start": { "line": 135, "column": 2 }, "end": { "line": 135, "column": 61 } },
				"24": { "start": { "line": 136, "column": 2 }, "end": { "line": 136, "column": 59 } },
				"25": { "start": { "line": 137, "column": 2 }, "end": { "line": 137, "column": 51 } },
				"26": { "start": { "line": 145, "column": 22 }, "end": { "line": 145, "column": 92 } },
				"27": { "start": { "line": 147, "column": 24 }, "end": { "line": 151, "column": 37 } },
				"28": { "start": { "line": 153, "column": 22 }, "end": { "line": 156, "column": 35 } },
				"29": { "start": { "line": 158, "column": 2 }, "end": { "line": 162, "column": 4 } },
				"30": { "start": { "line": 169, "column": 19 }, "end": { "line": 169, "column": 95 } },
				"31": { "start": { "line": 171, "column": 2 }, "end": { "line": 196, "column": 4 } }
			},
			"fnMap": {
				"0": {
					"name": "createMockServer",
					"decl": { "start": { "line": 70, "column": 16 }, "end": { "line": 70, "column": 32 } },
					"loc": { "start": { "line": 70, "column": 32 }, "end": { "line": 80, "column": 1 } }
				},
				"1": {
					"name": "(anonymous_1)",
					"decl": { "start": { "line": 74, "column": 18 }, "end": { "line": 74, "column": 19 } },
					"loc": { "start": { "line": 74, "column": 98 }, "end": { "line": 76, "column": 5 } }
				},
				"2": {
					"name": "testToolSuccess",
					"decl": { "start": { "line": 88, "column": 22 }, "end": { "line": 88, "column": 37 } },
					"loc": { "start": { "line": 88, "column": 81 }, "end": { "line": 90, "column": 1 } }
				},
				"3": {
					"name": "testToolError",
					"decl": { "start": { "line": 100, "column": 22 }, "end": { "line": 100, "column": 35 } },
					"loc": { "start": { "line": 104, "column": 14 }, "end": { "line": 110, "column": 1 } }
				},
				"4": {
					"name": "(anonymous_4)",
					"decl": { "start": { "line": 106, "column": 32 }, "end": { "line": 106, "column": 35 } },
					"loc": { "start": { "line": 106, "column": 37 }, "end": { "line": 108, "column": 3 } }
				},
				"5": {
					"name": "verifySuccessResponse",
					"decl": { "start": { "line": 117, "column": 16 }, "end": { "line": 117, "column": 37 } },
					"loc": { "start": { "line": 117, "column": 99 }, "end": { "line": 125, "column": 1 } }
				},
				"6": {
					"name": "verifyErrorResponse",
					"decl": { "start": { "line": 132, "column": 16 }, "end": { "line": 132, "column": 35 } },
					"loc": { "start": { "line": 132, "column": 80 }, "end": { "line": 138, "column": 1 } }
				},
				"7": {
					"name": "setupBalanceMocks",
					"decl": { "start": { "line": 143, "column": 16 }, "end": { "line": 143, "column": 33 } },
					"loc": { "start": { "line": 143, "column": 33 }, "end": { "line": 163, "column": 1 } }
				},
				"8": {
					"name": "setupTransactionMocks",
					"decl": { "start": { "line": 168, "column": 16 }, "end": { "line": 168, "column": 37 } },
					"loc": { "start": { "line": 168, "column": 37 }, "end": { "line": 197, "column": 1 } }
				}
			},
			"branchMap": {},
			"s": {
				"0": 1,
				"1": 1,
				"2": 1,
				"3": 1,
				"4": 1,
				"5": 1,
				"6": 1,
				"7": 1,
				"8": 1,
				"9": 1,
				"10": 27,
				"11": 1,
				"12": 15,
				"13": 15,
				"14": 15,
				"15": 15,
				"16": 2,
				"17": 2,
				"18": 2,
				"19": 2,
				"20": 2,
				"21": 15,
				"22": 15,
				"23": 15,
				"24": 15,
				"25": 15,
				"26": 2,
				"27": 2,
				"28": 2,
				"29": 2,
				"30": 1,
				"31": 1
			},
			"f": { "0": 1, "1": 27, "2": 15, "3": 15, "4": 15, "5": 2, "6": 15, "7": 2, "8": 1 },
			"b": {}
		},
		"/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/config.mock.ts": {
			"path": "/Users/carson/Development/Sei/sei-js/packages/mcp-server/src/tests/core/config.mock.ts",
			"statementMap": {
				"0": { "start": { "line": 18, "column": 0 }, "end": { "line": 18, "column": 16 } },
				"1": { "start": { "line": 29, "column": 0 }, "end": { "line": 29, "column": 16 } },
				"2": { "start": { "line": 1, "column": 0 }, "end": { "line": 1, "column": 24 } },
				"3": { "start": { "line": 5, "column": 18 }, "end": { "line": 7, "column": 2 } },
				"4": { "start": { "line": 10, "column": 32 }, "end": { "line": 15, "column": 1 } },
				"5": { "start": { "line": 11, "column": 1 }, "end": { "line": 11, "column": 28 } },
				"6": { "start": { "line": 11, "column": 11 }, "end": { "line": 11, "column": 28 } },
				"7": { "start": { "line": 14, "column": 1 }, "end": { "line": 14, "column": 48 } },
				"8": { "start": { "line": 10, "column": 13 }, "end": { "line": 10, "column": 32 } },
				"9": { "start": { "line": 20, "column": 13 }, "end": { "line": 20, "column": 41 } },
				"10": { "start": { "line": 23, "column": 1 }, "end": { "line": 25, "column": 3 } },
				"11": { "start": { "line": 30, "column": 1 }, "end": { "line": 30, "column": 45 } }
			},
			"fnMap": {
				"0": {
					"name": "(anonymous_0)",
					"decl": { "start": { "line": 10, "column": 32 }, "end": { "line": 10, "column": 33 } },
					"loc": { "start": { "line": 10, "column": 69 }, "end": { "line": 15, "column": 1 } }
				},
				"1": {
					"name": "initializeConfig",
					"decl": { "start": { "line": 18, "column": 16 }, "end": { "line": 18, "column": 32 } },
					"loc": { "start": { "line": 18, "column": 76 }, "end": { "line": 26, "column": 1 } }
				},
				"2": {
					"name": "getPrivateKeyAsHex",
					"decl": { "start": { "line": 29, "column": 16 }, "end": { "line": 29, "column": 34 } },
					"loc": { "start": { "line": 29, "column": 66 }, "end": { "line": 31, "column": 1 } }
				}
			},
			"branchMap": {
				"0": {
					"loc": { "start": { "line": 11, "column": 1 }, "end": { "line": 11, "column": 28 } },
					"type": "if",
					"locations": [{ "start": { "line": 11, "column": 1 }, "end": { "line": 11, "column": 28 } }]
				},
				"1": {
					"loc": { "start": { "line": 14, "column": 8 }, "end": { "line": 14, "column": 47 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 14, "column": 31 }, "end": { "line": 14, "column": 34 } },
						{ "start": { "line": 14, "column": 37 }, "end": { "line": 14, "column": 47 } }
					]
				},
				"2": {
					"loc": { "start": { "line": 24, "column": 14 }, "end": { "line": 24, "column": 78 } },
					"type": "cond-expr",
					"locations": [
						{ "start": { "line": 24, "column": 28 }, "end": { "line": 24, "column": 66 } },
						{ "start": { "line": 24, "column": 69 }, "end": { "line": 24, "column": 78 } }
					]
				}
			},
			"s": { "0": 1, "1": 1, "2": 1, "3": 1, "4": 1, "5": 8, "6": 4, "7": 4, "8": 1, "9": 5, "10": 5, "11": 2 },
			"f": { "0": 8, "1": 5, "2": 2 },
			"b": { "0": [4], "1": [2, 2], "2": [4, 1] }
		}
	}
}
