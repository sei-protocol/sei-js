syntax = "proto3";
package seiprotocol.seichain.nitro;

import "gogoproto/gogo.proto";
import "seiprotocol/seichain/nitro/data.proto"; 
import "seiprotocol/seichain/nitro/account.proto"; 

option go_package = "github.com/sei-protocol/sei-chain/x/nitro/types";

service Msg {
    rpc RecordTransactionData(MsgRecordTransactionData) returns (MsgRecordTransactionDataResponse);
    rpc SubmitFraudChallenge(MsgSubmitFraudChallenge) returns (MsgSubmitFraudChallengeResponse);
}

message MsgRecordTransactionData {
    string sender = 1 [
        (gogoproto.jsontag) = "sender"
    ];
    uint64 slot = 2 [
        (gogoproto.jsontag) = "slot"
    ];
    string stateRoot = 3 [
        (gogoproto.jsontag) = "state_root"
    ];
    repeated string txs = 4 [
        (gogoproto.jsontag) = "txs"
    ];
}

message MsgSubmitFraudChallenge {
    string sender = 1 [
        (gogoproto.jsontag) = "sender"
    ];
    uint64 startSlot = 2 [
        (gogoproto.jsontag) = "start_slot"
    ];
    uint64 endSlot = 3 [
        (gogoproto.jsontag) = "end_slot"
    ];
    string fraudStatePubKey = 4 [
        (gogoproto.jsontag) = "fraud_state_pub_key"
    ];
    MerkleProof merkleProof = 5 [
        (gogoproto.jsontag) = "merkle_proof"
    ];
    repeated Account accountStates = 6 [
        (gogoproto.jsontag) = "account_states"
    ];
    repeated Account programs = 7 [
        (gogoproto.jsontag) = "programs"
    ];
    repeated Account sysvarAccounts = 8 [
        (gogoproto.jsontag) = "sysvar_accounts"
    ];
}

message MsgRecordTransactionDataResponse {}

message MsgSubmitFraudChallengeResponse {}