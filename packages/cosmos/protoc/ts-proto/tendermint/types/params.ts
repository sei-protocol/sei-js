// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: tendermint/types/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../google/protobuf/duration";

export const protobufPackage = "tendermint.types";

/**
 * ConsensusParams contains consensus critical parameters that determine the
 * validity of blocks.
 */
export interface ConsensusParams {
	block?: BlockParams | undefined;
	evidence?: EvidenceParams | undefined;
	validator?: ValidatorParams | undefined;
	version?: VersionParams | undefined;
	synchrony?: SynchronyParams | undefined;
	timeout?: TimeoutParams | undefined;
	abci?: ABCIParams | undefined;
}

/** BlockParams contains limits on the block size. */
export interface BlockParams {
	/**
	 * Max block size, in bytes.
	 * Note: must be greater than 0
	 */
	max_bytes: number;
	/**
	 * Max gas per block.
	 * Note: must be greater or equal to -1
	 */
	max_gas: number;
}

/** EvidenceParams determine how we handle evidence of malfeasance. */
export interface EvidenceParams {
	/**
	 * Max age of evidence, in blocks.
	 *
	 * The basic formula for calculating this is: MaxAgeDuration / {average block
	 * time}.
	 */
	max_age_num_blocks: number;
	/**
	 * Max age of evidence, in time.
	 *
	 * It should correspond with an app's "unbonding period" or other similar
	 * mechanism for handling [Nothing-At-Stake
	 * attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
	 */
	max_age_duration?: Duration | undefined;
	/**
	 * This sets the maximum size of total evidence in bytes that can be committed
	 * in a single block. and should fall comfortably under the max block bytes.
	 * Default is 1048576 or 1MB
	 */
	max_bytes: number;
}

/**
 * ValidatorParams restrict the public key types validators can use.
 * NOTE: uses ABCI pubkey naming, not Amino names.
 */
export interface ValidatorParams {
	pub_key_types: string[];
}

/** VersionParams contains the ABCI application version. */
export interface VersionParams {
	app_version: number;
}

/**
 * HashedParams is a subset of ConsensusParams.
 *
 * It is hashed into the Header.ConsensusHash.
 */
export interface HashedParams {
	block_max_bytes: number;
	block_max_gas: number;
}

/**
 * SynchronyParams configure the bounds under which a proposed block's timestamp is considered valid.
 * These parameters are part of the proposer-based timestamps algorithm. For more information,
 * see the specification of proposer-based timestamps:
 * https://github.com/tendermint/tendermint/tree/master/spec/consensus/proposer-based-timestamp
 */
export interface SynchronyParams {
	/**
	 * message_delay bounds how long a proposal message may take to reach all validators on a network
	 * and still be considered valid.
	 */
	message_delay?: Duration | undefined;
	/**
	 * precision bounds how skewed a proposer's clock may be from any validator
	 * on the network while still producing valid proposals.
	 */
	precision?: Duration | undefined;
}

/** TimeoutParams configure the timeouts for the steps of the Tendermint consensus algorithm. */
export interface TimeoutParams {
	/**
	 * These fields configure the timeouts for the propose step of the Tendermint
	 * consensus algorithm: propose is the initial timeout and propose_delta
	 * determines how much the timeout grows in subsequent rounds.
	 * For the first round, this propose timeout is used and for every subsequent
	 * round, the timeout grows by propose_delta.
	 *
	 * For example:
	 * With propose = 10ms, propose_delta = 5ms, the first round's propose phase
	 * timeout would be 10ms, the second round's would be 15ms, the third 20ms and so on.
	 *
	 * If a node waiting for a proposal message does not receive one matching its
	 * current height and round before this timeout, the node will issue a
	 * nil prevote for the round and advance to the next step.
	 */
	propose?: Duration | undefined;
	propose_delta?: Duration | undefined;
	/**
	 * vote along with vote_delta configure the timeout for both of the prevote and
	 * precommit steps of the Tendermint consensus algorithm.
	 *
	 * These parameters influence the vote step timeouts in the the same way that
	 * the propose and propose_delta parameters do to the proposal step.
	 *
	 * The vote timeout does not begin until a quorum of votes has been received. Once
	 * a quorum of votes has been seen and this timeout elapses, Tendermint will
	 * procced to the next step of the consensus algorithm. If Tendermint receives
	 * all of the remaining votes before the end of the timeout, it will proceed
	 * to the next step immediately.
	 */
	vote?: Duration | undefined;
	vote_delta?: Duration | undefined;
	/**
	 * commit configures how long Tendermint will wait after receiving a quorum of
	 * precommits before beginning consensus for the next height. This can be
	 * used to allow slow precommits to arrive for inclusion in the next height before progressing.
	 */
	commit?: Duration | undefined;
	/**
	 * bypass_commit_timeout configures the node to proceed immediately to
	 * the next height once the node has received all precommits for a block, forgoing
	 * the remaining commit timeout.
	 * Setting bypass_commit_timeout false (the default) causes Tendermint to wait
	 * for the full commit timeout.
	 */
	bypass_commit_timeout: boolean;
}

/** ABCIParams configure functionality specific to the Application Blockchain Interface. */
export interface ABCIParams {
	/**
	 * vote_extensions_enable_height configures the first height during which
	 * vote extensions will be enabled. During this specified height, and for all
	 * subsequent heights, precommit messages that do not contain valid extension data
	 * will be considered invalid. Prior to this height, vote extensions will not
	 * be used or accepted by validators on the network.
	 *
	 * Once enabled, vote extensions will be created by the application in ExtendVote,
	 * passed to the application for validation in VerifyVoteExtension and given
	 * to the application to use when proposing a block during PrepareProposal.
	 */
	vote_extensions_enable_height: number;
	/**
	 * Indicates if CheckTx should be called on all the transactions
	 * remaining in the mempool after a block is executed.
	 */
	recheck_tx: boolean;
}

function createBaseConsensusParams(): ConsensusParams {
	return {
		block: undefined,
		evidence: undefined,
		validator: undefined,
		version: undefined,
		synchrony: undefined,
		timeout: undefined,
		abci: undefined
	};
}

export const ConsensusParams: MessageFns<ConsensusParams, "tendermint.types.ConsensusParams"> = {
	$type: "tendermint.types.ConsensusParams" as const,

	encode(message: ConsensusParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.block !== undefined) {
			BlockParams.encode(message.block, writer.uint32(10).fork()).join();
		}
		if (message.evidence !== undefined) {
			EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).join();
		}
		if (message.validator !== undefined) {
			ValidatorParams.encode(message.validator, writer.uint32(26).fork()).join();
		}
		if (message.version !== undefined) {
			VersionParams.encode(message.version, writer.uint32(34).fork()).join();
		}
		if (message.synchrony !== undefined) {
			SynchronyParams.encode(message.synchrony, writer.uint32(42).fork()).join();
		}
		if (message.timeout !== undefined) {
			TimeoutParams.encode(message.timeout, writer.uint32(50).fork()).join();
		}
		if (message.abci !== undefined) {
			ABCIParams.encode(message.abci, writer.uint32(58).fork()).join();
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ConsensusParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseConsensusParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.block = BlockParams.decode(reader, reader.uint32());
					continue;
				case 2:
					if (tag !== 18) {
						break;
					}

					message.evidence = EvidenceParams.decode(reader, reader.uint32());
					continue;
				case 3:
					if (tag !== 26) {
						break;
					}

					message.validator = ValidatorParams.decode(reader, reader.uint32());
					continue;
				case 4:
					if (tag !== 34) {
						break;
					}

					message.version = VersionParams.decode(reader, reader.uint32());
					continue;
				case 5:
					if (tag !== 42) {
						break;
					}

					message.synchrony = SynchronyParams.decode(reader, reader.uint32());
					continue;
				case 6:
					if (tag !== 50) {
						break;
					}

					message.timeout = TimeoutParams.decode(reader, reader.uint32());
					continue;
				case 7:
					if (tag !== 58) {
						break;
					}

					message.abci = ABCIParams.decode(reader, reader.uint32());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): ConsensusParams {
		return {
			block: isSet(object.block) ? BlockParams.fromJSON(object.block) : undefined,
			evidence: isSet(object.evidence) ? EvidenceParams.fromJSON(object.evidence) : undefined,
			validator: isSet(object.validator) ? ValidatorParams.fromJSON(object.validator) : undefined,
			version: isSet(object.version) ? VersionParams.fromJSON(object.version) : undefined,
			synchrony: isSet(object.synchrony) ? SynchronyParams.fromJSON(object.synchrony) : undefined,
			timeout: isSet(object.timeout) ? TimeoutParams.fromJSON(object.timeout) : undefined,
			abci: isSet(object.abci) ? ABCIParams.fromJSON(object.abci) : undefined
		};
	},

	toJSON(message: ConsensusParams): unknown {
		const obj: any = {};
		if (message.block !== undefined) {
			obj.block = BlockParams.toJSON(message.block);
		}
		if (message.evidence !== undefined) {
			obj.evidence = EvidenceParams.toJSON(message.evidence);
		}
		if (message.validator !== undefined) {
			obj.validator = ValidatorParams.toJSON(message.validator);
		}
		if (message.version !== undefined) {
			obj.version = VersionParams.toJSON(message.version);
		}
		if (message.synchrony !== undefined) {
			obj.synchrony = SynchronyParams.toJSON(message.synchrony);
		}
		if (message.timeout !== undefined) {
			obj.timeout = TimeoutParams.toJSON(message.timeout);
		}
		if (message.abci !== undefined) {
			obj.abci = ABCIParams.toJSON(message.abci);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<ConsensusParams>, I>>(base?: I): ConsensusParams {
		return ConsensusParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<ConsensusParams>, I>>(object: I): ConsensusParams {
		const message = createBaseConsensusParams();
		message.block = object.block !== undefined && object.block !== null ? BlockParams.fromPartial(object.block) : undefined;
		message.evidence = object.evidence !== undefined && object.evidence !== null ? EvidenceParams.fromPartial(object.evidence) : undefined;
		message.validator = object.validator !== undefined && object.validator !== null ? ValidatorParams.fromPartial(object.validator) : undefined;
		message.version = object.version !== undefined && object.version !== null ? VersionParams.fromPartial(object.version) : undefined;
		message.synchrony = object.synchrony !== undefined && object.synchrony !== null ? SynchronyParams.fromPartial(object.synchrony) : undefined;
		message.timeout = object.timeout !== undefined && object.timeout !== null ? TimeoutParams.fromPartial(object.timeout) : undefined;
		message.abci = object.abci !== undefined && object.abci !== null ? ABCIParams.fromPartial(object.abci) : undefined;
		return message;
	}
};

function createBaseBlockParams(): BlockParams {
	return { max_bytes: 0, max_gas: 0 };
}

export const BlockParams: MessageFns<BlockParams, "tendermint.types.BlockParams"> = {
	$type: "tendermint.types.BlockParams" as const,

	encode(message: BlockParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.max_bytes !== 0) {
			writer.uint32(8).int64(message.max_bytes);
		}
		if (message.max_gas !== 0) {
			writer.uint32(16).int64(message.max_gas);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): BlockParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseBlockParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.max_bytes = longToNumber(reader.int64());
					continue;
				case 2:
					if (tag !== 16) {
						break;
					}

					message.max_gas = longToNumber(reader.int64());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): BlockParams {
		return {
			max_bytes: isSet(object.max_bytes) ? globalThis.Number(object.max_bytes) : 0,
			max_gas: isSet(object.max_gas) ? globalThis.Number(object.max_gas) : 0
		};
	},

	toJSON(message: BlockParams): unknown {
		const obj: any = {};
		if (message.max_bytes !== 0) {
			obj.max_bytes = Math.round(message.max_bytes);
		}
		if (message.max_gas !== 0) {
			obj.max_gas = Math.round(message.max_gas);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<BlockParams>, I>>(base?: I): BlockParams {
		return BlockParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<BlockParams>, I>>(object: I): BlockParams {
		const message = createBaseBlockParams();
		message.max_bytes = object.max_bytes ?? 0;
		message.max_gas = object.max_gas ?? 0;
		return message;
	}
};

function createBaseEvidenceParams(): EvidenceParams {
	return { max_age_num_blocks: 0, max_age_duration: undefined, max_bytes: 0 };
}

export const EvidenceParams: MessageFns<EvidenceParams, "tendermint.types.EvidenceParams"> = {
	$type: "tendermint.types.EvidenceParams" as const,

	encode(message: EvidenceParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.max_age_num_blocks !== 0) {
			writer.uint32(8).int64(message.max_age_num_blocks);
		}
		if (message.max_age_duration !== undefined) {
			Duration.encode(message.max_age_duration, writer.uint32(18).fork()).join();
		}
		if (message.max_bytes !== 0) {
			writer.uint32(24).int64(message.max_bytes);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): EvidenceParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseEvidenceParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.max_age_num_blocks = longToNumber(reader.int64());
					continue;
				case 2:
					if (tag !== 18) {
						break;
					}

					message.max_age_duration = Duration.decode(reader, reader.uint32());
					continue;
				case 3:
					if (tag !== 24) {
						break;
					}

					message.max_bytes = longToNumber(reader.int64());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): EvidenceParams {
		return {
			max_age_num_blocks: isSet(object.max_age_num_blocks) ? globalThis.Number(object.max_age_num_blocks) : 0,
			max_age_duration: isSet(object.max_age_duration) ? Duration.fromJSON(object.max_age_duration) : undefined,
			max_bytes: isSet(object.max_bytes) ? globalThis.Number(object.max_bytes) : 0
		};
	},

	toJSON(message: EvidenceParams): unknown {
		const obj: any = {};
		if (message.max_age_num_blocks !== 0) {
			obj.max_age_num_blocks = Math.round(message.max_age_num_blocks);
		}
		if (message.max_age_duration !== undefined) {
			obj.max_age_duration = Duration.toJSON(message.max_age_duration);
		}
		if (message.max_bytes !== 0) {
			obj.max_bytes = Math.round(message.max_bytes);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<EvidenceParams>, I>>(base?: I): EvidenceParams {
		return EvidenceParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<EvidenceParams>, I>>(object: I): EvidenceParams {
		const message = createBaseEvidenceParams();
		message.max_age_num_blocks = object.max_age_num_blocks ?? 0;
		message.max_age_duration =
			object.max_age_duration !== undefined && object.max_age_duration !== null ? Duration.fromPartial(object.max_age_duration) : undefined;
		message.max_bytes = object.max_bytes ?? 0;
		return message;
	}
};

function createBaseValidatorParams(): ValidatorParams {
	return { pub_key_types: [] };
}

export const ValidatorParams: MessageFns<ValidatorParams, "tendermint.types.ValidatorParams"> = {
	$type: "tendermint.types.ValidatorParams" as const,

	encode(message: ValidatorParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		for (const v of message.pub_key_types) {
			writer.uint32(10).string(v!);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ValidatorParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseValidatorParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.pub_key_types.push(reader.string());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): ValidatorParams {
		return {
			pub_key_types: globalThis.Array.isArray(object?.pub_key_types) ? object.pub_key_types.map((e: any) => globalThis.String(e)) : []
		};
	},

	toJSON(message: ValidatorParams): unknown {
		const obj: any = {};
		if (message.pub_key_types?.length) {
			obj.pub_key_types = message.pub_key_types;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<ValidatorParams>, I>>(base?: I): ValidatorParams {
		return ValidatorParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<ValidatorParams>, I>>(object: I): ValidatorParams {
		const message = createBaseValidatorParams();
		message.pub_key_types = object.pub_key_types?.map((e) => e) || [];
		return message;
	}
};

function createBaseVersionParams(): VersionParams {
	return { app_version: 0 };
}

export const VersionParams: MessageFns<VersionParams, "tendermint.types.VersionParams"> = {
	$type: "tendermint.types.VersionParams" as const,

	encode(message: VersionParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.app_version !== 0) {
			writer.uint32(8).uint64(message.app_version);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): VersionParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseVersionParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.app_version = longToNumber(reader.uint64());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): VersionParams {
		return { app_version: isSet(object.app_version) ? globalThis.Number(object.app_version) : 0 };
	},

	toJSON(message: VersionParams): unknown {
		const obj: any = {};
		if (message.app_version !== 0) {
			obj.app_version = Math.round(message.app_version);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<VersionParams>, I>>(base?: I): VersionParams {
		return VersionParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<VersionParams>, I>>(object: I): VersionParams {
		const message = createBaseVersionParams();
		message.app_version = object.app_version ?? 0;
		return message;
	}
};

function createBaseHashedParams(): HashedParams {
	return { block_max_bytes: 0, block_max_gas: 0 };
}

export const HashedParams: MessageFns<HashedParams, "tendermint.types.HashedParams"> = {
	$type: "tendermint.types.HashedParams" as const,

	encode(message: HashedParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.block_max_bytes !== 0) {
			writer.uint32(8).int64(message.block_max_bytes);
		}
		if (message.block_max_gas !== 0) {
			writer.uint32(16).int64(message.block_max_gas);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): HashedParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseHashedParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.block_max_bytes = longToNumber(reader.int64());
					continue;
				case 2:
					if (tag !== 16) {
						break;
					}

					message.block_max_gas = longToNumber(reader.int64());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): HashedParams {
		return {
			block_max_bytes: isSet(object.block_max_bytes) ? globalThis.Number(object.block_max_bytes) : 0,
			block_max_gas: isSet(object.block_max_gas) ? globalThis.Number(object.block_max_gas) : 0
		};
	},

	toJSON(message: HashedParams): unknown {
		const obj: any = {};
		if (message.block_max_bytes !== 0) {
			obj.block_max_bytes = Math.round(message.block_max_bytes);
		}
		if (message.block_max_gas !== 0) {
			obj.block_max_gas = Math.round(message.block_max_gas);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<HashedParams>, I>>(base?: I): HashedParams {
		return HashedParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<HashedParams>, I>>(object: I): HashedParams {
		const message = createBaseHashedParams();
		message.block_max_bytes = object.block_max_bytes ?? 0;
		message.block_max_gas = object.block_max_gas ?? 0;
		return message;
	}
};

function createBaseSynchronyParams(): SynchronyParams {
	return { message_delay: undefined, precision: undefined };
}

export const SynchronyParams: MessageFns<SynchronyParams, "tendermint.types.SynchronyParams"> = {
	$type: "tendermint.types.SynchronyParams" as const,

	encode(message: SynchronyParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.message_delay !== undefined) {
			Duration.encode(message.message_delay, writer.uint32(10).fork()).join();
		}
		if (message.precision !== undefined) {
			Duration.encode(message.precision, writer.uint32(18).fork()).join();
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SynchronyParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseSynchronyParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.message_delay = Duration.decode(reader, reader.uint32());
					continue;
				case 2:
					if (tag !== 18) {
						break;
					}

					message.precision = Duration.decode(reader, reader.uint32());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): SynchronyParams {
		return {
			message_delay: isSet(object.message_delay) ? Duration.fromJSON(object.message_delay) : undefined,
			precision: isSet(object.precision) ? Duration.fromJSON(object.precision) : undefined
		};
	},

	toJSON(message: SynchronyParams): unknown {
		const obj: any = {};
		if (message.message_delay !== undefined) {
			obj.message_delay = Duration.toJSON(message.message_delay);
		}
		if (message.precision !== undefined) {
			obj.precision = Duration.toJSON(message.precision);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<SynchronyParams>, I>>(base?: I): SynchronyParams {
		return SynchronyParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<SynchronyParams>, I>>(object: I): SynchronyParams {
		const message = createBaseSynchronyParams();
		message.message_delay = object.message_delay !== undefined && object.message_delay !== null ? Duration.fromPartial(object.message_delay) : undefined;
		message.precision = object.precision !== undefined && object.precision !== null ? Duration.fromPartial(object.precision) : undefined;
		return message;
	}
};

function createBaseTimeoutParams(): TimeoutParams {
	return {
		propose: undefined,
		propose_delta: undefined,
		vote: undefined,
		vote_delta: undefined,
		commit: undefined,
		bypass_commit_timeout: false
	};
}

export const TimeoutParams: MessageFns<TimeoutParams, "tendermint.types.TimeoutParams"> = {
	$type: "tendermint.types.TimeoutParams" as const,

	encode(message: TimeoutParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.propose !== undefined) {
			Duration.encode(message.propose, writer.uint32(10).fork()).join();
		}
		if (message.propose_delta !== undefined) {
			Duration.encode(message.propose_delta, writer.uint32(18).fork()).join();
		}
		if (message.vote !== undefined) {
			Duration.encode(message.vote, writer.uint32(26).fork()).join();
		}
		if (message.vote_delta !== undefined) {
			Duration.encode(message.vote_delta, writer.uint32(34).fork()).join();
		}
		if (message.commit !== undefined) {
			Duration.encode(message.commit, writer.uint32(42).fork()).join();
		}
		if (message.bypass_commit_timeout !== false) {
			writer.uint32(48).bool(message.bypass_commit_timeout);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): TimeoutParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseTimeoutParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.propose = Duration.decode(reader, reader.uint32());
					continue;
				case 2:
					if (tag !== 18) {
						break;
					}

					message.propose_delta = Duration.decode(reader, reader.uint32());
					continue;
				case 3:
					if (tag !== 26) {
						break;
					}

					message.vote = Duration.decode(reader, reader.uint32());
					continue;
				case 4:
					if (tag !== 34) {
						break;
					}

					message.vote_delta = Duration.decode(reader, reader.uint32());
					continue;
				case 5:
					if (tag !== 42) {
						break;
					}

					message.commit = Duration.decode(reader, reader.uint32());
					continue;
				case 6:
					if (tag !== 48) {
						break;
					}

					message.bypass_commit_timeout = reader.bool();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): TimeoutParams {
		return {
			propose: isSet(object.propose) ? Duration.fromJSON(object.propose) : undefined,
			propose_delta: isSet(object.propose_delta) ? Duration.fromJSON(object.propose_delta) : undefined,
			vote: isSet(object.vote) ? Duration.fromJSON(object.vote) : undefined,
			vote_delta: isSet(object.vote_delta) ? Duration.fromJSON(object.vote_delta) : undefined,
			commit: isSet(object.commit) ? Duration.fromJSON(object.commit) : undefined,
			bypass_commit_timeout: isSet(object.bypass_commit_timeout) ? globalThis.Boolean(object.bypass_commit_timeout) : false
		};
	},

	toJSON(message: TimeoutParams): unknown {
		const obj: any = {};
		if (message.propose !== undefined) {
			obj.propose = Duration.toJSON(message.propose);
		}
		if (message.propose_delta !== undefined) {
			obj.propose_delta = Duration.toJSON(message.propose_delta);
		}
		if (message.vote !== undefined) {
			obj.vote = Duration.toJSON(message.vote);
		}
		if (message.vote_delta !== undefined) {
			obj.vote_delta = Duration.toJSON(message.vote_delta);
		}
		if (message.commit !== undefined) {
			obj.commit = Duration.toJSON(message.commit);
		}
		if (message.bypass_commit_timeout !== false) {
			obj.bypass_commit_timeout = message.bypass_commit_timeout;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<TimeoutParams>, I>>(base?: I): TimeoutParams {
		return TimeoutParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<TimeoutParams>, I>>(object: I): TimeoutParams {
		const message = createBaseTimeoutParams();
		message.propose = object.propose !== undefined && object.propose !== null ? Duration.fromPartial(object.propose) : undefined;
		message.propose_delta = object.propose_delta !== undefined && object.propose_delta !== null ? Duration.fromPartial(object.propose_delta) : undefined;
		message.vote = object.vote !== undefined && object.vote !== null ? Duration.fromPartial(object.vote) : undefined;
		message.vote_delta = object.vote_delta !== undefined && object.vote_delta !== null ? Duration.fromPartial(object.vote_delta) : undefined;
		message.commit = object.commit !== undefined && object.commit !== null ? Duration.fromPartial(object.commit) : undefined;
		message.bypass_commit_timeout = object.bypass_commit_timeout ?? false;
		return message;
	}
};

function createBaseABCIParams(): ABCIParams {
	return { vote_extensions_enable_height: 0, recheck_tx: false };
}

export const ABCIParams: MessageFns<ABCIParams, "tendermint.types.ABCIParams"> = {
	$type: "tendermint.types.ABCIParams" as const,

	encode(message: ABCIParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.vote_extensions_enable_height !== 0) {
			writer.uint32(8).int64(message.vote_extensions_enable_height);
		}
		if (message.recheck_tx !== false) {
			writer.uint32(16).bool(message.recheck_tx);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ABCIParams {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseABCIParams();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.vote_extensions_enable_height = longToNumber(reader.int64());
					continue;
				case 2:
					if (tag !== 16) {
						break;
					}

					message.recheck_tx = reader.bool();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): ABCIParams {
		return {
			vote_extensions_enable_height: isSet(object.vote_extensions_enable_height) ? globalThis.Number(object.vote_extensions_enable_height) : 0,
			recheck_tx: isSet(object.recheck_tx) ? globalThis.Boolean(object.recheck_tx) : false
		};
	},

	toJSON(message: ABCIParams): unknown {
		const obj: any = {};
		if (message.vote_extensions_enable_height !== 0) {
			obj.vote_extensions_enable_height = Math.round(message.vote_extensions_enable_height);
		}
		if (message.recheck_tx !== false) {
			obj.recheck_tx = message.recheck_tx;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<ABCIParams>, I>>(base?: I): ABCIParams {
		return ABCIParams.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<ABCIParams>, I>>(object: I): ABCIParams {
		const message = createBaseABCIParams();
		message.vote_extensions_enable_height = object.vote_extensions_enable_height ?? 0;
		message.recheck_tx = object.recheck_tx ?? false;
		return message;
	}
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
	const num = globalThis.Number(int64.toString());
	if (num > globalThis.Number.MAX_SAFE_INTEGER) {
		throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
	}
	if (num < globalThis.Number.MIN_SAFE_INTEGER) {
		throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
	}
	return num;
}

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
	readonly $type: V;
	encode(message: T, writer?: BinaryWriter): BinaryWriter;
	decode(input: BinaryReader | Uint8Array, length?: number): T;
	fromJSON(object: any): T;
	toJSON(message: T): unknown;
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
