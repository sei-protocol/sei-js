// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/vesting/v1beta1/vesting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BaseAccount } from "../../auth/v1beta1/auth";
import { Coin } from "../../base/v1beta1/coin";

export const protobufPackage = "cosmos.vesting.v1beta1";

/**
 * BaseVestingAccount implements the VestingAccount interface. It contains all
 * the necessary fields needed for any vesting account implementation.
 */
export interface BaseVestingAccount {
  base_account?: BaseAccount | undefined;
  original_vesting: Coin[];
  delegated_free: Coin[];
  delegated_vesting: Coin[];
  end_time: number;
  /** admin field (optional), an address who has oversight powers for the vesting account such as cancelling */
  admin: string;
  /** this field (default nil) indicates whether the vesting for the account has been cancelled (and what time it was cancelled) */
  cancelled_time: number;
}

/**
 * ContinuousVestingAccount implements the VestingAccount interface. It
 * continuously vests by unlocking coins linearly with respect to time.
 */
export interface ContinuousVestingAccount {
  base_vesting_account?: BaseVestingAccount | undefined;
  start_time: number;
}

/**
 * DelayedVestingAccount implements the VestingAccount interface. It vests all
 * coins after a specific time, but non prior. In other words, it keeps them
 * locked until a specified time.
 */
export interface DelayedVestingAccount {
  base_vesting_account?: BaseVestingAccount | undefined;
}

/** Period defines a length of time and amount of coins that will vest. */
export interface Period {
  length: number;
  amount: Coin[];
}

/**
 * PeriodicVestingAccount implements the VestingAccount interface. It
 * periodically vests by unlocking coins during each specified period.
 */
export interface PeriodicVestingAccount {
  base_vesting_account?: BaseVestingAccount | undefined;
  start_time: number;
  vesting_periods: Period[];
}

/**
 * PermanentLockedAccount implements the VestingAccount interface. It does
 * not ever release coins, locking them indefinitely. Coins in this account can
 * still be used for delegating and for governance votes even while locked.
 *
 * Since: cosmos-sdk 0.43
 */
export interface PermanentLockedAccount {
  base_vesting_account?: BaseVestingAccount | undefined;
}

function createBaseBaseVestingAccount(): BaseVestingAccount {
  return {
    base_account: undefined,
    original_vesting: [],
    delegated_free: [],
    delegated_vesting: [],
    end_time: 0,
    admin: "",
    cancelled_time: 0,
  };
}

export const BaseVestingAccount: MessageFns<BaseVestingAccount, "cosmos.vesting.v1beta1.BaseVestingAccount"> = {
  $type: "cosmos.vesting.v1beta1.BaseVestingAccount" as const,

  encode(message: BaseVestingAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base_account !== undefined) {
      BaseAccount.encode(message.base_account, writer.uint32(10).fork()).join();
    }
    for (const v of message.original_vesting) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.delegated_free) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.delegated_vesting) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.end_time !== 0) {
      writer.uint32(40).int64(message.end_time);
    }
    if (message.admin !== "") {
      writer.uint32(50).string(message.admin);
    }
    if (message.cancelled_time !== 0) {
      writer.uint32(56).int64(message.cancelled_time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BaseVestingAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBaseVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base_account = BaseAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.original_vesting.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.delegated_free.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.delegated_vesting.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.end_time = longToNumber(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.admin = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.cancelled_time = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BaseVestingAccount {
    return {
      base_account: isSet(object.base_account) ? BaseAccount.fromJSON(object.base_account) : undefined,
      original_vesting: globalThis.Array.isArray(object?.original_vesting)
        ? object.original_vesting.map((e: any) => Coin.fromJSON(e))
        : [],
      delegated_free: globalThis.Array.isArray(object?.delegated_free)
        ? object.delegated_free.map((e: any) => Coin.fromJSON(e))
        : [],
      delegated_vesting: globalThis.Array.isArray(object?.delegated_vesting)
        ? object.delegated_vesting.map((e: any) => Coin.fromJSON(e))
        : [],
      end_time: isSet(object.end_time) ? globalThis.Number(object.end_time) : 0,
      admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
      cancelled_time: isSet(object.cancelled_time) ? globalThis.Number(object.cancelled_time) : 0,
    };
  },

  toJSON(message: BaseVestingAccount): unknown {
    const obj: any = {};
    if (message.base_account !== undefined) {
      obj.base_account = BaseAccount.toJSON(message.base_account);
    }
    if (message.original_vesting?.length) {
      obj.original_vesting = message.original_vesting.map((e) => Coin.toJSON(e));
    }
    if (message.delegated_free?.length) {
      obj.delegated_free = message.delegated_free.map((e) => Coin.toJSON(e));
    }
    if (message.delegated_vesting?.length) {
      obj.delegated_vesting = message.delegated_vesting.map((e) => Coin.toJSON(e));
    }
    if (message.end_time !== 0) {
      obj.end_time = Math.round(message.end_time);
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.cancelled_time !== 0) {
      obj.cancelled_time = Math.round(message.cancelled_time);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BaseVestingAccount>, I>>(base?: I): BaseVestingAccount {
    return BaseVestingAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BaseVestingAccount>, I>>(object: I): BaseVestingAccount {
    const message = createBaseBaseVestingAccount();
    message.base_account = (object.base_account !== undefined && object.base_account !== null)
      ? BaseAccount.fromPartial(object.base_account)
      : undefined;
    message.original_vesting = object.original_vesting?.map((e) => Coin.fromPartial(e)) || [];
    message.delegated_free = object.delegated_free?.map((e) => Coin.fromPartial(e)) || [];
    message.delegated_vesting = object.delegated_vesting?.map((e) => Coin.fromPartial(e)) || [];
    message.end_time = object.end_time ?? 0;
    message.admin = object.admin ?? "";
    message.cancelled_time = object.cancelled_time ?? 0;
    return message;
  },
};

function createBaseContinuousVestingAccount(): ContinuousVestingAccount {
  return { base_vesting_account: undefined, start_time: 0 };
}

export const ContinuousVestingAccount: MessageFns<
  ContinuousVestingAccount,
  "cosmos.vesting.v1beta1.ContinuousVestingAccount"
> = {
  $type: "cosmos.vesting.v1beta1.ContinuousVestingAccount" as const,

  encode(message: ContinuousVestingAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base_vesting_account !== undefined) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    if (message.start_time !== 0) {
      writer.uint32(16).int64(message.start_time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinuousVestingAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.start_time = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousVestingAccount {
    return {
      base_vesting_account: isSet(object.base_vesting_account)
        ? BaseVestingAccount.fromJSON(object.base_vesting_account)
        : undefined,
      start_time: isSet(object.start_time) ? globalThis.Number(object.start_time) : 0,
    };
  },

  toJSON(message: ContinuousVestingAccount): unknown {
    const obj: any = {};
    if (message.base_vesting_account !== undefined) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    if (message.start_time !== 0) {
      obj.start_time = Math.round(message.start_time);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContinuousVestingAccount>, I>>(base?: I): ContinuousVestingAccount {
    return ContinuousVestingAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContinuousVestingAccount>, I>>(object: I): ContinuousVestingAccount {
    const message = createBaseContinuousVestingAccount();
    message.base_vesting_account = (object.base_vesting_account !== undefined && object.base_vesting_account !== null)
      ? BaseVestingAccount.fromPartial(object.base_vesting_account)
      : undefined;
    message.start_time = object.start_time ?? 0;
    return message;
  },
};

function createBaseDelayedVestingAccount(): DelayedVestingAccount {
  return { base_vesting_account: undefined };
}

export const DelayedVestingAccount: MessageFns<DelayedVestingAccount, "cosmos.vesting.v1beta1.DelayedVestingAccount"> =
  {
    $type: "cosmos.vesting.v1beta1.DelayedVestingAccount" as const,

    encode(message: DelayedVestingAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.base_vesting_account !== undefined) {
        BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DelayedVestingAccount {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseDelayedVestingAccount();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): DelayedVestingAccount {
      return {
        base_vesting_account: isSet(object.base_vesting_account)
          ? BaseVestingAccount.fromJSON(object.base_vesting_account)
          : undefined,
      };
    },

    toJSON(message: DelayedVestingAccount): unknown {
      const obj: any = {};
      if (message.base_vesting_account !== undefined) {
        obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<DelayedVestingAccount>, I>>(base?: I): DelayedVestingAccount {
      return DelayedVestingAccount.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<DelayedVestingAccount>, I>>(object: I): DelayedVestingAccount {
      const message = createBaseDelayedVestingAccount();
      message.base_vesting_account = (object.base_vesting_account !== undefined && object.base_vesting_account !== null)
        ? BaseVestingAccount.fromPartial(object.base_vesting_account)
        : undefined;
      return message;
    },
  };

function createBasePeriod(): Period {
  return { length: 0, amount: [] };
}

export const Period: MessageFns<Period, "cosmos.vesting.v1beta1.Period"> = {
  $type: "cosmos.vesting.v1beta1.Period" as const,

  encode(message: Period, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.length !== 0) {
      writer.uint32(8).int64(message.length);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Period {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeriod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.length = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Period {
    return {
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Period): unknown {
    const obj: any = {};
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Period>, I>>(base?: I): Period {
    return Period.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Period>, I>>(object: I): Period {
    const message = createBasePeriod();
    message.length = object.length ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBasePeriodicVestingAccount(): PeriodicVestingAccount {
  return { base_vesting_account: undefined, start_time: 0, vesting_periods: [] };
}

export const PeriodicVestingAccount: MessageFns<
  PeriodicVestingAccount,
  "cosmos.vesting.v1beta1.PeriodicVestingAccount"
> = {
  $type: "cosmos.vesting.v1beta1.PeriodicVestingAccount" as const,

  encode(message: PeriodicVestingAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base_vesting_account !== undefined) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    if (message.start_time !== 0) {
      writer.uint32(16).int64(message.start_time);
    }
    for (const v of message.vesting_periods) {
      Period.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PeriodicVestingAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeriodicVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.start_time = longToNumber(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vesting_periods.push(Period.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PeriodicVestingAccount {
    return {
      base_vesting_account: isSet(object.base_vesting_account)
        ? BaseVestingAccount.fromJSON(object.base_vesting_account)
        : undefined,
      start_time: isSet(object.start_time) ? globalThis.Number(object.start_time) : 0,
      vesting_periods: globalThis.Array.isArray(object?.vesting_periods)
        ? object.vesting_periods.map((e: any) => Period.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PeriodicVestingAccount): unknown {
    const obj: any = {};
    if (message.base_vesting_account !== undefined) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    if (message.start_time !== 0) {
      obj.start_time = Math.round(message.start_time);
    }
    if (message.vesting_periods?.length) {
      obj.vesting_periods = message.vesting_periods.map((e) => Period.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PeriodicVestingAccount>, I>>(base?: I): PeriodicVestingAccount {
    return PeriodicVestingAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PeriodicVestingAccount>, I>>(object: I): PeriodicVestingAccount {
    const message = createBasePeriodicVestingAccount();
    message.base_vesting_account = (object.base_vesting_account !== undefined && object.base_vesting_account !== null)
      ? BaseVestingAccount.fromPartial(object.base_vesting_account)
      : undefined;
    message.start_time = object.start_time ?? 0;
    message.vesting_periods = object.vesting_periods?.map((e) => Period.fromPartial(e)) || [];
    return message;
  },
};

function createBasePermanentLockedAccount(): PermanentLockedAccount {
  return { base_vesting_account: undefined };
}

export const PermanentLockedAccount: MessageFns<
  PermanentLockedAccount,
  "cosmos.vesting.v1beta1.PermanentLockedAccount"
> = {
  $type: "cosmos.vesting.v1beta1.PermanentLockedAccount" as const,

  encode(message: PermanentLockedAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base_vesting_account !== undefined) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermanentLockedAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermanentLockedAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PermanentLockedAccount {
    return {
      base_vesting_account: isSet(object.base_vesting_account)
        ? BaseVestingAccount.fromJSON(object.base_vesting_account)
        : undefined,
    };
  },

  toJSON(message: PermanentLockedAccount): unknown {
    const obj: any = {};
    if (message.base_vesting_account !== undefined) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PermanentLockedAccount>, I>>(base?: I): PermanentLockedAccount {
    return PermanentLockedAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PermanentLockedAccount>, I>>(object: I): PermanentLockedAccount {
    const message = createBasePermanentLockedAccount();
    message.base_vesting_account = (object.base_vesting_account !== undefined && object.base_vesting_account !== null)
      ? BaseVestingAccount.fromPartial(object.base_vesting_account)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
