// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/slashing/v1beta1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.slashing.v1beta1";

/** MsgUnjail defines the Msg/Unjail request type */
export interface MsgUnjail {
	validator_addr: string;
}

/** MsgUnjailResponse defines the Msg/Unjail response type */
export interface MsgUnjailResponse {}

function createBaseMsgUnjail(): MsgUnjail {
	return { validator_addr: "" };
}

export const MsgUnjail: MessageFns<MsgUnjail, "cosmos.slashing.v1beta1.MsgUnjail"> = {
	$type: "cosmos.slashing.v1beta1.MsgUnjail" as const,

	encode(message: MsgUnjail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.validator_addr !== "") {
			writer.uint32(10).string(message.validator_addr);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): MsgUnjail {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseMsgUnjail();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.validator_addr = reader.string();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): MsgUnjail {
		return { validator_addr: isSet(object.validator_addr) ? globalThis.String(object.validator_addr) : "" };
	},

	toJSON(message: MsgUnjail): unknown {
		const obj: any = {};
		if (message.validator_addr !== "") {
			obj.validator_addr = message.validator_addr;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<MsgUnjail>, I>>(base?: I): MsgUnjail {
		return MsgUnjail.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<MsgUnjail>, I>>(object: I): MsgUnjail {
		const message = createBaseMsgUnjail();
		message.validator_addr = object.validator_addr ?? "";
		return message;
	}
};

function createBaseMsgUnjailResponse(): MsgUnjailResponse {
	return {};
}

export const MsgUnjailResponse: MessageFns<MsgUnjailResponse, "cosmos.slashing.v1beta1.MsgUnjailResponse"> = {
	$type: "cosmos.slashing.v1beta1.MsgUnjailResponse" as const,

	encode(_: MsgUnjailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): MsgUnjailResponse {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseMsgUnjailResponse();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(_: any): MsgUnjailResponse {
		return {};
	},

	toJSON(_: MsgUnjailResponse): unknown {
		const obj: any = {};
		return obj;
	},

	create<I extends Exact<DeepPartial<MsgUnjailResponse>, I>>(base?: I): MsgUnjailResponse {
		return MsgUnjailResponse.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<MsgUnjailResponse>, I>>(_: I): MsgUnjailResponse {
		const message = createBaseMsgUnjailResponse();
		return message;
	}
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
	readonly $type: V;
	encode(message: T, writer?: BinaryWriter): BinaryWriter;
	decode(input: BinaryReader | Uint8Array, length?: number): T;
	fromJSON(object: any): T;
	toJSON(message: T): unknown;
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
