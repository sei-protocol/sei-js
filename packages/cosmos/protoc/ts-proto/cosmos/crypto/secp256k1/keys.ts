// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/crypto/secp256k1/keys.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.crypto.secp256k1";

/**
 * PubKey defines a secp256k1 public key
 * Key is the compressed form of the pubkey. The first byte depends is a 0x02 byte
 * if the y-coordinate is the lexicographically largest of the two associated with
 * the x-coordinate. Otherwise the first byte is a 0x03.
 * This prefix is followed with the x-coordinate.
 */
export interface PubKey {
	key: Uint8Array;
}

/** PrivKey defines a secp256k1 private key. */
export interface PrivKey {
	key: Uint8Array;
}

function createBasePubKey(): PubKey {
	return { key: new Uint8Array(0) };
}

export const PubKey: MessageFns<PubKey, "cosmos.crypto.secp256k1.PubKey"> = {
	$type: "cosmos.crypto.secp256k1.PubKey" as const,

	encode(message: PubKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.key.length !== 0) {
			writer.uint32(10).bytes(message.key);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): PubKey {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBasePubKey();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.key = reader.bytes();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): PubKey {
		return { key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0) };
	},

	toJSON(message: PubKey): unknown {
		const obj: any = {};
		if (message.key.length !== 0) {
			obj.key = base64FromBytes(message.key);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<PubKey>, I>>(base?: I): PubKey {
		return PubKey.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<PubKey>, I>>(object: I): PubKey {
		const message = createBasePubKey();
		message.key = object.key ?? new Uint8Array(0);
		return message;
	}
};

function createBasePrivKey(): PrivKey {
	return { key: new Uint8Array(0) };
}

export const PrivKey: MessageFns<PrivKey, "cosmos.crypto.secp256k1.PrivKey"> = {
	$type: "cosmos.crypto.secp256k1.PrivKey" as const,

	encode(message: PrivKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.key.length !== 0) {
			writer.uint32(10).bytes(message.key);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): PrivKey {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBasePrivKey();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.key = reader.bytes();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): PrivKey {
		return { key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0) };
	},

	toJSON(message: PrivKey): unknown {
		const obj: any = {};
		if (message.key.length !== 0) {
			obj.key = base64FromBytes(message.key);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<PrivKey>, I>>(base?: I): PrivKey {
		return PrivKey.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<PrivKey>, I>>(object: I): PrivKey {
		const message = createBasePrivKey();
		message.key = object.key ?? new Uint8Array(0);
		return message;
	}
};

function bytesFromBase64(b64: string): Uint8Array {
	if ((globalThis as any).Buffer) {
		return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
	} else {
		const bin = globalThis.atob(b64);
		const arr = new Uint8Array(bin.length);
		for (let i = 0; i < bin.length; ++i) {
			arr[i] = bin.charCodeAt(i);
		}
		return arr;
	}
}

function base64FromBytes(arr: Uint8Array): string {
	if ((globalThis as any).Buffer) {
		return globalThis.Buffer.from(arr).toString("base64");
	} else {
		const bin: string[] = [];
		arr.forEach((byte) => {
			bin.push(globalThis.String.fromCharCode(byte));
		});
		return globalThis.btoa(bin.join(""));
	}
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
	readonly $type: V;
	encode(message: T, writer?: BinaryWriter): BinaryWriter;
	decode(input: BinaryReader | Uint8Array, length?: number): T;
	fromJSON(object: any): T;
	toJSON(message: T): unknown;
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
